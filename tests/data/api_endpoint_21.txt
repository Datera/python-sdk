{
  "/storage_nodes": {
    "read": {
      "descr": "List all storage nodes in the system",
      "minVersion": "0.9.5.0",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/storage_nodes",
      "entity": "storage_node",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of the storage node"
          },
          "name": {
            "type": "string",
            "descr": "Name of storage node"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of system in bytes"
          },
          "total_raw_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of raw disks in bytes"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Total space in bytes"
          },
          "model": {
            "type": "string",
            "descr": "Datera storage node model"
          },
          "serial_no": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "mgmt_ip_1": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "mgmt_ip_2": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "internal_ip_1": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "internal_ip_2": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Overall health of storage node"
          },
          "admin_state": {
            "enum": [
              "online",
              "offline",
              "decommission"
            ],
            "descr": "Administrative state of the storage node"
          },
          "op_state": {
            "enum": [
              "online",
              "offline",
              "failed",
              "error",
              "decommissioning",
              "initializing",
              "decommissioned"
            ],
            "descr": "Operational state of the storage node"
          },
          "op_status": {
            "enum": [
              "discovering",
              "initializing",
              "recovering",
              "decommissioning"
            ],
            "descr": "Op status of the storage node"
          },
          "op_progress": {
            "descr": "Progress of an operation on system such as node recovery",
            "containment": {
              "isCollection": false,
              "entity": "operation_progress"
            }
          },
          "bios_version": {
            "type": "string",
            "descr": "BIOS version"
          },
          "os_version": {
            "type": "string",
            "descr": "Operating system version"
          },
          "sw_version": {
            "type": "string",
            "descr": "Software version"
          },
          "last_reboot_timestamp": {
            "type": "integer",
            "descr": "UNIX timestamp "
          },
          "subsystem_health": {
            "descr": "Subsystem health of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "subsystem_states": {
            "descr": "Subsystem states of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "hdds": {
            "descr": "Hard drive disks of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "hdd"
            }
          },
          "nvm_flash_devices": {
            "descr": "NVM flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "flash_devices": {
            "descr": "Flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "boot_drives": {
            "descr": "Boot drives of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "boot_drive"
            }
          },
          "nics": {
            "descr": "Network interface cards of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nic"
            }
          },
          "volumes": {
            "descr": "The volume placed on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "volume"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "upgrade": {
            "descr": "Upgrade info for the storage node",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "storage_instances": {
            "descr": "The storage instances on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "vendor": {
            "type": "string",
            "descr": "Storage node manufacturer"
          },
          "sw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Software health of storage node"
          },
          "hw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Hardware health of storage node"
          },
          "type": {
            "enum": [
              "hybrid",
              "all_flash",
              "unknown"
            ],
            "descr": "Type of the storage node"
          },
          "psus": {
            "descr": "Power supplies of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "psu"
            }
          },
          "hw_state": {
            "descr": "State of the storage node's hardware",
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical",
              "degraded",
              "error"
            ]
          },
          "sw_state": {
            "descr": "State of the storage node's software",
            "enum": [
              "initializing",
              "ok",
              "error",
              "off"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "disconnected": {
            "descr": "Boolean flag indicating that the node has been disconnected or is no longer part of the system",
            "type": "boolean"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the node"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the node"
          }
        }
      }
    },
    "stream": {
      "descr": "List all storage nodes in the system",
      "minVersion": "0.9.5.0",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes",
      "entity": "storage_node",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of the storage node"
          },
          "name": {
            "type": "string",
            "descr": "Name of storage node"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of system in bytes"
          },
          "total_raw_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of raw disks in bytes"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Total space in bytes"
          },
          "model": {
            "type": "string",
            "descr": "Datera storage node model"
          },
          "serial_no": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "mgmt_ip_1": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "mgmt_ip_2": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "internal_ip_1": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "internal_ip_2": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Overall health of storage node"
          },
          "admin_state": {
            "enum": [
              "online",
              "offline",
              "decommission"
            ],
            "descr": "Administrative state of the storage node"
          },
          "op_state": {
            "enum": [
              "online",
              "offline",
              "failed",
              "error",
              "decommissioning",
              "initializing",
              "decommissioned"
            ],
            "descr": "Operational state of the storage node"
          },
          "op_status": {
            "enum": [
              "discovering",
              "initializing",
              "recovering",
              "decommissioning"
            ],
            "descr": "Op status of the storage node"
          },
          "op_progress": {
            "descr": "Progress of an operation on system such as node recovery",
            "containment": {
              "isCollection": false,
              "entity": "operation_progress"
            }
          },
          "bios_version": {
            "type": "string",
            "descr": "BIOS version"
          },
          "os_version": {
            "type": "string",
            "descr": "Operating system version"
          },
          "sw_version": {
            "type": "string",
            "descr": "Software version"
          },
          "last_reboot_timestamp": {
            "type": "integer",
            "descr": "UNIX timestamp "
          },
          "subsystem_health": {
            "descr": "Subsystem health of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "subsystem_states": {
            "descr": "Subsystem states of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "hdds": {
            "descr": "Hard drive disks of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "hdd"
            }
          },
          "nvm_flash_devices": {
            "descr": "NVM flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "flash_devices": {
            "descr": "Flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "boot_drives": {
            "descr": "Boot drives of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "boot_drive"
            }
          },
          "nics": {
            "descr": "Network interface cards of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nic"
            }
          },
          "volumes": {
            "descr": "The volume placed on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "volume"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "upgrade": {
            "descr": "Upgrade info for the storage node",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "storage_instances": {
            "descr": "The storage instances on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "vendor": {
            "type": "string",
            "descr": "Storage node manufacturer"
          },
          "sw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Software health of storage node"
          },
          "hw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Hardware health of storage node"
          },
          "type": {
            "enum": [
              "hybrid",
              "all_flash",
              "unknown"
            ],
            "descr": "Type of the storage node"
          },
          "psus": {
            "descr": "Power supplies of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "psu"
            }
          },
          "hw_state": {
            "descr": "State of the storage node's hardware",
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical",
              "degraded",
              "error"
            ]
          },
          "sw_state": {
            "descr": "State of the storage node's software",
            "enum": [
              "initializing",
              "ok",
              "error",
              "off"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "disconnected": {
            "descr": "Boolean flag indicating that the node has been disconnected or is no longer part of the system",
            "type": "boolean"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the node"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the node"
          }
        }
      }
    },
    "live": {
      "descr": "List all storage nodes in the system",
      "minVersion": "0.9.5.0",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes",
      "entity": "storage_node",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of the storage node"
          },
          "name": {
            "type": "string",
            "descr": "Name of storage node"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of system in bytes"
          },
          "total_raw_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of raw disks in bytes"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Total space in bytes"
          },
          "model": {
            "type": "string",
            "descr": "Datera storage node model"
          },
          "serial_no": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "mgmt_ip_1": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "mgmt_ip_2": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "internal_ip_1": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "internal_ip_2": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Overall health of storage node"
          },
          "admin_state": {
            "enum": [
              "online",
              "offline",
              "decommission"
            ],
            "descr": "Administrative state of the storage node"
          },
          "op_state": {
            "enum": [
              "online",
              "offline",
              "failed",
              "error",
              "decommissioning",
              "initializing",
              "decommissioned"
            ],
            "descr": "Operational state of the storage node"
          },
          "op_status": {
            "enum": [
              "discovering",
              "initializing",
              "recovering",
              "decommissioning"
            ],
            "descr": "Op status of the storage node"
          },
          "op_progress": {
            "descr": "Progress of an operation on system such as node recovery",
            "containment": {
              "isCollection": false,
              "entity": "operation_progress"
            }
          },
          "bios_version": {
            "type": "string",
            "descr": "BIOS version"
          },
          "os_version": {
            "type": "string",
            "descr": "Operating system version"
          },
          "sw_version": {
            "type": "string",
            "descr": "Software version"
          },
          "last_reboot_timestamp": {
            "type": "integer",
            "descr": "UNIX timestamp "
          },
          "subsystem_health": {
            "descr": "Subsystem health of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "subsystem_states": {
            "descr": "Subsystem states of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "hdds": {
            "descr": "Hard drive disks of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "hdd"
            }
          },
          "nvm_flash_devices": {
            "descr": "NVM flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "flash_devices": {
            "descr": "Flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "boot_drives": {
            "descr": "Boot drives of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "boot_drive"
            }
          },
          "nics": {
            "descr": "Network interface cards of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nic"
            }
          },
          "volumes": {
            "descr": "The volume placed on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "volume"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "upgrade": {
            "descr": "Upgrade info for the storage node",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "storage_instances": {
            "descr": "The storage instances on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "vendor": {
            "type": "string",
            "descr": "Storage node manufacturer"
          },
          "sw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Software health of storage node"
          },
          "hw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Hardware health of storage node"
          },
          "type": {
            "enum": [
              "hybrid",
              "all_flash",
              "unknown"
            ],
            "descr": "Type of the storage node"
          },
          "psus": {
            "descr": "Power supplies of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "psu"
            }
          },
          "hw_state": {
            "descr": "State of the storage node's hardware",
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical",
              "degraded",
              "error"
            ]
          },
          "sw_state": {
            "descr": "State of the storage node's software",
            "enum": [
              "initializing",
              "ok",
              "error",
              "off"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "disconnected": {
            "descr": "Boolean flag indicating that the node has been disconnected or is no longer part of the system",
            "type": "boolean"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the node"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the node"
          }
        }
      }
    }
  },
  "/storage_nodes/:uuid": {
    "read": {
      "descr": "Show a single storage node",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/storage_nodes/:uuid",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "storage_node",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of the storage node"
          },
          "name": {
            "type": "string",
            "descr": "Name of storage node"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of system in bytes"
          },
          "total_raw_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of raw disks in bytes"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Total space in bytes"
          },
          "model": {
            "type": "string",
            "descr": "Datera storage node model"
          },
          "serial_no": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "mgmt_ip_1": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "mgmt_ip_2": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "internal_ip_1": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "internal_ip_2": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Overall health of storage node"
          },
          "admin_state": {
            "enum": [
              "online",
              "offline",
              "decommission"
            ],
            "descr": "Administrative state of the storage node"
          },
          "op_state": {
            "enum": [
              "online",
              "offline",
              "failed",
              "error",
              "decommissioning",
              "initializing",
              "decommissioned"
            ],
            "descr": "Operational state of the storage node"
          },
          "op_status": {
            "enum": [
              "discovering",
              "initializing",
              "recovering",
              "decommissioning"
            ],
            "descr": "Op status of the storage node"
          },
          "op_progress": {
            "descr": "Progress of an operation on system such as node recovery",
            "containment": {
              "isCollection": false,
              "entity": "operation_progress"
            }
          },
          "bios_version": {
            "type": "string",
            "descr": "BIOS version"
          },
          "os_version": {
            "type": "string",
            "descr": "Operating system version"
          },
          "sw_version": {
            "type": "string",
            "descr": "Software version"
          },
          "last_reboot_timestamp": {
            "type": "integer",
            "descr": "UNIX timestamp "
          },
          "subsystem_health": {
            "descr": "Subsystem health of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "subsystem_states": {
            "descr": "Subsystem states of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "hdds": {
            "descr": "Hard drive disks of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "hdd"
            }
          },
          "nvm_flash_devices": {
            "descr": "NVM flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "flash_devices": {
            "descr": "Flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "boot_drives": {
            "descr": "Boot drives of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "boot_drive"
            }
          },
          "nics": {
            "descr": "Network interface cards of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nic"
            }
          },
          "volumes": {
            "descr": "The volume placed on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "volume"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "upgrade": {
            "descr": "Upgrade info for the storage node",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "storage_instances": {
            "descr": "The storage instances on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "vendor": {
            "type": "string",
            "descr": "Storage node manufacturer"
          },
          "sw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Software health of storage node"
          },
          "hw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Hardware health of storage node"
          },
          "type": {
            "enum": [
              "hybrid",
              "all_flash",
              "unknown"
            ],
            "descr": "Type of the storage node"
          },
          "psus": {
            "descr": "Power supplies of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "psu"
            }
          },
          "hw_state": {
            "descr": "State of the storage node's hardware",
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical",
              "degraded",
              "error"
            ]
          },
          "sw_state": {
            "descr": "State of the storage node's software",
            "enum": [
              "initializing",
              "ok",
              "error",
              "off"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "disconnected": {
            "descr": "Boolean flag indicating that the node has been disconnected or is no longer part of the system",
            "type": "boolean"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the node"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the node"
          }
        }
      }
    },
    "update": {
      "descr": "Update a single storage node",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "admin_state": {
            "enum": [
              "online",
              "offline",
              "decommission"
            ],
            "descr": "Administrative state of the storage node"
          }
        }
      },
      "op": "update",
      "path": "/storage_nodes/:uuid",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "storage_node",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of the storage node"
          },
          "name": {
            "type": "string",
            "descr": "Name of storage node"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of system in bytes"
          },
          "total_raw_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of raw disks in bytes"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Total space in bytes"
          },
          "model": {
            "type": "string",
            "descr": "Datera storage node model"
          },
          "serial_no": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "mgmt_ip_1": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "mgmt_ip_2": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "internal_ip_1": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "internal_ip_2": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Overall health of storage node"
          },
          "admin_state": {
            "enum": [
              "online",
              "offline",
              "decommission"
            ],
            "descr": "Administrative state of the storage node"
          },
          "op_state": {
            "enum": [
              "online",
              "offline",
              "failed",
              "error",
              "decommissioning",
              "initializing",
              "decommissioned"
            ],
            "descr": "Operational state of the storage node"
          },
          "op_status": {
            "enum": [
              "discovering",
              "initializing",
              "recovering",
              "decommissioning"
            ],
            "descr": "Op status of the storage node"
          },
          "op_progress": {
            "descr": "Progress of an operation on system such as node recovery",
            "containment": {
              "isCollection": false,
              "entity": "operation_progress"
            }
          },
          "bios_version": {
            "type": "string",
            "descr": "BIOS version"
          },
          "os_version": {
            "type": "string",
            "descr": "Operating system version"
          },
          "sw_version": {
            "type": "string",
            "descr": "Software version"
          },
          "last_reboot_timestamp": {
            "type": "integer",
            "descr": "UNIX timestamp "
          },
          "subsystem_health": {
            "descr": "Subsystem health of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "subsystem_states": {
            "descr": "Subsystem states of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "hdds": {
            "descr": "Hard drive disks of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "hdd"
            }
          },
          "nvm_flash_devices": {
            "descr": "NVM flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "flash_devices": {
            "descr": "Flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "boot_drives": {
            "descr": "Boot drives of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "boot_drive"
            }
          },
          "nics": {
            "descr": "Network interface cards of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nic"
            }
          },
          "volumes": {
            "descr": "The volume placed on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "volume"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "upgrade": {
            "descr": "Upgrade info for the storage node",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "storage_instances": {
            "descr": "The storage instances on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "vendor": {
            "type": "string",
            "descr": "Storage node manufacturer"
          },
          "sw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Software health of storage node"
          },
          "hw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Hardware health of storage node"
          },
          "type": {
            "enum": [
              "hybrid",
              "all_flash",
              "unknown"
            ],
            "descr": "Type of the storage node"
          },
          "psus": {
            "descr": "Power supplies of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "psu"
            }
          },
          "hw_state": {
            "descr": "State of the storage node's hardware",
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical",
              "degraded",
              "error"
            ]
          },
          "sw_state": {
            "descr": "State of the storage node's software",
            "enum": [
              "initializing",
              "ok",
              "error",
              "off"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "disconnected": {
            "descr": "Boolean flag indicating that the node has been disconnected or is no longer part of the system",
            "type": "boolean"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the node"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the node"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes/:uuid",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "storage_node",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of the storage node"
          },
          "name": {
            "type": "string",
            "descr": "Name of storage node"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of system in bytes"
          },
          "total_raw_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of raw disks in bytes"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Total space in bytes"
          },
          "model": {
            "type": "string",
            "descr": "Datera storage node model"
          },
          "serial_no": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "mgmt_ip_1": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "mgmt_ip_2": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "internal_ip_1": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "internal_ip_2": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Overall health of storage node"
          },
          "admin_state": {
            "enum": [
              "online",
              "offline",
              "decommission"
            ],
            "descr": "Administrative state of the storage node"
          },
          "op_state": {
            "enum": [
              "online",
              "offline",
              "failed",
              "error",
              "decommissioning",
              "initializing",
              "decommissioned"
            ],
            "descr": "Operational state of the storage node"
          },
          "op_status": {
            "enum": [
              "discovering",
              "initializing",
              "recovering",
              "decommissioning"
            ],
            "descr": "Op status of the storage node"
          },
          "op_progress": {
            "descr": "Progress of an operation on system such as node recovery",
            "containment": {
              "isCollection": false,
              "entity": "operation_progress"
            }
          },
          "bios_version": {
            "type": "string",
            "descr": "BIOS version"
          },
          "os_version": {
            "type": "string",
            "descr": "Operating system version"
          },
          "sw_version": {
            "type": "string",
            "descr": "Software version"
          },
          "last_reboot_timestamp": {
            "type": "integer",
            "descr": "UNIX timestamp "
          },
          "subsystem_health": {
            "descr": "Subsystem health of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "subsystem_states": {
            "descr": "Subsystem states of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "hdds": {
            "descr": "Hard drive disks of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "hdd"
            }
          },
          "nvm_flash_devices": {
            "descr": "NVM flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "flash_devices": {
            "descr": "Flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "boot_drives": {
            "descr": "Boot drives of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "boot_drive"
            }
          },
          "nics": {
            "descr": "Network interface cards of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nic"
            }
          },
          "volumes": {
            "descr": "The volume placed on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "volume"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "upgrade": {
            "descr": "Upgrade info for the storage node",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "storage_instances": {
            "descr": "The storage instances on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "vendor": {
            "type": "string",
            "descr": "Storage node manufacturer"
          },
          "sw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Software health of storage node"
          },
          "hw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Hardware health of storage node"
          },
          "type": {
            "enum": [
              "hybrid",
              "all_flash",
              "unknown"
            ],
            "descr": "Type of the storage node"
          },
          "psus": {
            "descr": "Power supplies of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "psu"
            }
          },
          "hw_state": {
            "descr": "State of the storage node's hardware",
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical",
              "degraded",
              "error"
            ]
          },
          "sw_state": {
            "descr": "State of the storage node's software",
            "enum": [
              "initializing",
              "ok",
              "error",
              "off"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "disconnected": {
            "descr": "Boolean flag indicating that the node has been disconnected or is no longer part of the system",
            "type": "boolean"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the node"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the node"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes/:uuid",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "storage_node",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of the storage node"
          },
          "name": {
            "type": "string",
            "descr": "Name of storage node"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of system in bytes"
          },
          "total_raw_capacity": {
            "type": "integer",
            "descr": "Total storage capacity of raw disks in bytes"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Total space in bytes"
          },
          "model": {
            "type": "string",
            "descr": "Datera storage node model"
          },
          "serial_no": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "mgmt_ip_1": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "mgmt_ip_2": {
            "type": "string",
            "descr": "Management IP addresses"
          },
          "internal_ip_1": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "internal_ip_2": {
            "type": "string",
            "descr": "Datera storage node serial number"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Overall health of storage node"
          },
          "admin_state": {
            "enum": [
              "online",
              "offline",
              "decommission"
            ],
            "descr": "Administrative state of the storage node"
          },
          "op_state": {
            "enum": [
              "online",
              "offline",
              "failed",
              "error",
              "decommissioning",
              "initializing",
              "decommissioned"
            ],
            "descr": "Operational state of the storage node"
          },
          "op_status": {
            "enum": [
              "discovering",
              "initializing",
              "recovering",
              "decommissioning"
            ],
            "descr": "Op status of the storage node"
          },
          "op_progress": {
            "descr": "Progress of an operation on system such as node recovery",
            "containment": {
              "isCollection": false,
              "entity": "operation_progress"
            }
          },
          "bios_version": {
            "type": "string",
            "descr": "BIOS version"
          },
          "os_version": {
            "type": "string",
            "descr": "Operating system version"
          },
          "sw_version": {
            "type": "string",
            "descr": "Software version"
          },
          "last_reboot_timestamp": {
            "type": "integer",
            "descr": "UNIX timestamp "
          },
          "subsystem_health": {
            "descr": "Subsystem health of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "subsystem_states": {
            "descr": "Subsystem states of the storage node",
            "containment": {
              "key": "id",
              "isCollection": false,
              "entity": "subsystem"
            }
          },
          "hdds": {
            "descr": "Hard drive disks of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "hdd"
            }
          },
          "nvm_flash_devices": {
            "descr": "NVM flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "flash_devices": {
            "descr": "Flash devices of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nvm_flash_device"
            }
          },
          "boot_drives": {
            "descr": "Boot drives of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "boot_drive"
            }
          },
          "nics": {
            "descr": "Network interface cards of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "nic"
            }
          },
          "volumes": {
            "descr": "The volume placed on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "volume"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "upgrade": {
            "descr": "Upgrade info for the storage node",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "storage_instances": {
            "descr": "The storage instances on this storage node",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "vendor": {
            "type": "string",
            "descr": "Storage node manufacturer"
          },
          "sw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Software health of storage node"
          },
          "hw_health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Hardware health of storage node"
          },
          "type": {
            "enum": [
              "hybrid",
              "all_flash",
              "unknown"
            ],
            "descr": "Type of the storage node"
          },
          "psus": {
            "descr": "Power supplies of the storage node",
            "containment": {
              "key": "id",
              "isCollection": true,
              "entity": "psu"
            }
          },
          "hw_state": {
            "descr": "State of the storage node's hardware",
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical",
              "degraded",
              "error"
            ]
          },
          "sw_state": {
            "descr": "State of the storage node's software",
            "enum": [
              "initializing",
              "ok",
              "error",
              "off"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "disconnected": {
            "descr": "Boolean flag indicating that the node has been disconnected or is no longer part of the system",
            "type": "boolean"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the node"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the node"
          }
        }
      }
    }
  },
  "/storage_nodes/:uuid/nics": {
    "read": {
      "descr": "List all the NICs on a storage node",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/storage_nodes/:uuid/nics",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "nic",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NIC (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes/:uuid/nics",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "nic",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NIC (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes/:uuid/nics",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "nic",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NIC (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    }
  },
  "/storage_nodes/:uuid/nics/:id": {
    "read": {
      "descr": "Show a NIC on a storage node",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/storage_nodes/:uuid/nics/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "nic",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NIC (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes/:uuid/nics/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "nic",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NIC (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes/:uuid/nics/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "nic",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NIC (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    }
  },
  "/storage_nodes/:uuid/hdds": {
    "read": {
      "descr": "List all the storage devices on a storage node",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/storage_nodes/:uuid/hdds",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "hdd",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the disk (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes/:uuid/hdds",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "hdd",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the disk (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes/:uuid/hdds",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "hdd",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the disk (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    }
  },
  "/storage_nodes/:uuid/hdds/:id": {
    "read": {
      "descr": "Show a storage devices on a storage node",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/storage_nodes/:uuid/hdds/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "hdd",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the disk (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes/:uuid/hdds/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "hdd",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the disk (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes/:uuid/hdds/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "hdd",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the disk (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    }
  },
  "/storage_nodes/:uuid/boot_drives": {
    "read": {
      "descr": "List all the boot drives on a storage node",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/storage_nodes/:uuid/boot_drives",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "boot_drive",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the boot drive (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes/:uuid/boot_drives",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "boot_drive",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the boot drive (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes/:uuid/boot_drives",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "boot_drive",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the boot drive (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    }
  },
  "/storage_nodes/:uuid/boot_drives/:id": {
    "read": {
      "descr": "Show a boot drive on a storage node",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/storage_nodes/:uuid/boot_drives/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "boot_drive",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the boot drive (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes/:uuid/boot_drives/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "boot_drive",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the boot drive (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes/:uuid/boot_drives/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "boot_drive",
      "minVersion": "1.0.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the boot drive (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    }
  },
  "/initiators": {
    "create": {
      "descr": "Create an initiator",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "op": "create",
      "path": "/initiators",
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "read": {
      "descr": "List all initiators",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/initiators",
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/initiators",
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/initiators",
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    }
  },
  "/initiators/:id": {
    "read": {
      "descr": "Show a single initiator",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/initiators/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
          "descr": "Initiator IQN or EUI",
          "fmthelp": "Must be in valid IQN or EUI format"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "update": {
      "descr": "Update an initiator",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      },
      "op": "update",
      "path": "/initiators/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
          "descr": "Initiator IQN or EUI",
          "fmthelp": "Must be in valid IQN or EUI format"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "delete": {
      "descr": "Delete an initiator",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/initiators/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
          "descr": "Initiator IQN or EUI",
          "fmthelp": "Must be in valid IQN or EUI format"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/initiators/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
          "descr": "Initiator IQN or EUI",
          "fmthelp": "Must be in valid IQN or EUI format"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/initiators/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
          "descr": "Initiator IQN or EUI",
          "fmthelp": "Must be in valid IQN or EUI format"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    }
  },
  "/initiator_groups": {
    "create": {
      "descr": "Create an initiator group",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "op": "create",
      "path": "/initiator_groups",
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "read": {
      "descr": "List all initiator groups",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/initiator_groups",
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/initiator_groups",
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/initiator_groups",
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    }
  },
  "/initiator_groups/:name": {
    "read": {
      "descr": "Show a single initiator group",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/initiator_groups/:name",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "descr": "Name of initiator group",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
        }
      },
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "update": {
      "descr": "Update an initiator group",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      },
      "op": "update",
      "path": "/initiator_groups/:name",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "descr": "Name of initiator group",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
        }
      },
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "delete": {
      "descr": "Delete an initiator group",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/initiator_groups/:name",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "descr": "Name of initiator group",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
        }
      },
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/initiator_groups/:name",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "descr": "Name of initiator group",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
        }
      },
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/initiator_groups/:name",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "descr": "Name of initiator group",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
        }
      },
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    }
  },
  "/initiator_groups/:name/members": {
    "read": {
      "descr": "List the members of an initiator group",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/initiator_groups/:name/members",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "descr": "Name of initiator group",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "update": {
      "descr": "Modify the members of an initiator group",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "descr": "path of object to add or remove from collection"
          },
          "op": {
            "type": "string",
            "descr": "type of operation (add or remove)",
            "enum": [
              "add",
              "remove"
            ]
          }
        },
        "required": [
          "path",
          "op"
        ]
      },
      "op": "update",
      "path": "/initiator_groups/:name/members",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "descr": "Name of initiator group",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/initiator_groups/:name/members",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "descr": "Name of initiator group",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/initiator_groups/:name/members",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "descr": "Name of initiator group",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    }
  },
  "/system": {
    "read": {
      "descr": "Show system-wide configuration information",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system",
      "entity": "system",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "l3_enabled": {
            "type": "boolean",
            "descr": "Flag indicating whether this system is running in network layer 3 mode"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "sw_version": {
            "type": "string",
            "descr": "Datera system version"
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "uuid": {
            "descr": "UUID of the system",
            "type": "string"
          },
          "name": {
            "descr": "Name of the system",
            "type": "string"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Available capacity of the cluster"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total capacity of the cluster"
          },
          "total_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of the cluster"
          },
          "dns": {
            "descr": "DNS information of the system",
            "containment": {
              "isCollection": false,
              "entity": "dns"
            }
          },
          "ntp_servers": {
            "descr": "NTP servers of the system",
            "containment": {
              "isCollection": true,
              "key": "ip",
              "entity": "ntp_server"
            }
          },
          "network": {
            "descr": "Network information of the system",
            "containment": {
              "isCollection": false,
              "entity": "network"
            }
          },
          "network_devices": {
            "descr": "Logical Network Device information of the system",
            "containment": {
              "isCollection": true,
              "key": "name",
              "entity": "networkDevice"
            }
          },
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is callhome enabled"
          },
          "http_proxy": {
            "descr": "HTTP Proxy information",
            "containment": {
              "isCollection": false,
              "entity": "http_proxy"
            }
          },
          "upgrade": {
            "descr": "System wide upgrade information",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "last_reboot_timestamp": {
            "type": "string",
            "descr": "Last time the cluster was restarted"
          },
          "uptime": {
            "type": "integer",
            "descr": "Milliseconds since last system reboot",
            "elapsed_time": "last_reboot_timestamp"
          },
          "hybrid_available_capacity": {
            "type": "integer",
            "descr": "Available capacity of hybrid nodes"
          },
          "hybrid_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of hybrid nodes"
          },
          "hybrid_total_capacity": {
            "type": "integer",
            "descr": "Total capacity of hybrid nodes"
          },
          "all_flash_available_capacity": {
            "type": "integer",
            "descr": "Available capacity of all-flash nodes"
          },
          "all_flash_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of all-flash nodes"
          },
          "all_flash_total_capacity": {
            "type": "integer",
            "descr": "Total capacity of all-flash nodes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "op_state": {
            "enum": [
              "unknwown",
              "initializing",
              "running",
              "maintenance",
              "degraded",
              "booting",
              "dead"
            ],
            "descr": "Operational state of the system"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the cluster"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the cluster"
          },
          "access_interface_aggr_type": {
            "enum": [
              "single",
              "bonded"
            ],
            "descr": "Access Network Interface Aggregation Type"
          },
          "internal_interface_aggr_type": {
            "enum": [
              "single",
              "bonded"
            ],
            "descr": "Internal Network Interface Aggregation Type"
          },
          "interface_aggregation_mode": {
            "enum": [
              "balance-rr",
              "active-backup",
              "balance-xor",
              "broadcast",
              "lacp",
              "balance-tlb",
              "balance-alb"
            ],
            "descr": "Network Interface Aggregation Mode"
          }
        }
      }
    },
    "update": {
      "descr": "Update system-wide configuration information",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is callhome enabled"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the cluster"
          },
          "access_interface_aggr_type": {
            "enum": [
              "single",
              "bonded"
            ],
            "descr": "Access Network Interface Aggregation Type"
          },
          "internal_interface_aggr_type": {
            "enum": [
              "single",
              "bonded"
            ],
            "descr": "Internal Network Interface Aggregation Type"
          },
          "interface_aggregation_mode": {
            "enum": [
              "balance-rr",
              "active-backup",
              "balance-xor",
              "broadcast",
              "lacp",
              "balance-tlb",
              "balance-alb"
            ],
            "descr": "Network Interface Aggregation Mode"
          },
          "network_devices": {
            "descr": "Logical Network Device information of the system",
            "containment": {
              "isCollection": true,
              "key": "name",
              "entity": "networkDevice"
            }
          }
        }
      },
      "op": "update",
      "path": "/system",
      "entity": "system",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "l3_enabled": {
            "type": "boolean",
            "descr": "Flag indicating whether this system is running in network layer 3 mode"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "sw_version": {
            "type": "string",
            "descr": "Datera system version"
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "uuid": {
            "descr": "UUID of the system",
            "type": "string"
          },
          "name": {
            "descr": "Name of the system",
            "type": "string"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Available capacity of the cluster"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total capacity of the cluster"
          },
          "total_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of the cluster"
          },
          "dns": {
            "descr": "DNS information of the system",
            "containment": {
              "isCollection": false,
              "entity": "dns"
            }
          },
          "ntp_servers": {
            "descr": "NTP servers of the system",
            "containment": {
              "isCollection": true,
              "key": "ip",
              "entity": "ntp_server"
            }
          },
          "network": {
            "descr": "Network information of the system",
            "containment": {
              "isCollection": false,
              "entity": "network"
            }
          },
          "network_devices": {
            "descr": "Logical Network Device information of the system",
            "containment": {
              "isCollection": true,
              "key": "name",
              "entity": "networkDevice"
            }
          },
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is callhome enabled"
          },
          "http_proxy": {
            "descr": "HTTP Proxy information",
            "containment": {
              "isCollection": false,
              "entity": "http_proxy"
            }
          },
          "upgrade": {
            "descr": "System wide upgrade information",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "last_reboot_timestamp": {
            "type": "string",
            "descr": "Last time the cluster was restarted"
          },
          "uptime": {
            "type": "integer",
            "descr": "Milliseconds since last system reboot",
            "elapsed_time": "last_reboot_timestamp"
          },
          "hybrid_available_capacity": {
            "type": "integer",
            "descr": "Available capacity of hybrid nodes"
          },
          "hybrid_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of hybrid nodes"
          },
          "hybrid_total_capacity": {
            "type": "integer",
            "descr": "Total capacity of hybrid nodes"
          },
          "all_flash_available_capacity": {
            "type": "integer",
            "descr": "Available capacity of all-flash nodes"
          },
          "all_flash_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of all-flash nodes"
          },
          "all_flash_total_capacity": {
            "type": "integer",
            "descr": "Total capacity of all-flash nodes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "op_state": {
            "enum": [
              "unknwown",
              "initializing",
              "running",
              "maintenance",
              "degraded",
              "booting",
              "dead"
            ],
            "descr": "Operational state of the system"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the cluster"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the cluster"
          },
          "access_interface_aggr_type": {
            "enum": [
              "single",
              "bonded"
            ],
            "descr": "Access Network Interface Aggregation Type"
          },
          "internal_interface_aggr_type": {
            "enum": [
              "single",
              "bonded"
            ],
            "descr": "Internal Network Interface Aggregation Type"
          },
          "interface_aggregation_mode": {
            "enum": [
              "balance-rr",
              "active-backup",
              "balance-xor",
              "broadcast",
              "lacp",
              "balance-tlb",
              "balance-alb"
            ],
            "descr": "Network Interface Aggregation Mode"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system",
      "entity": "system",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "l3_enabled": {
            "type": "boolean",
            "descr": "Flag indicating whether this system is running in network layer 3 mode"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "sw_version": {
            "type": "string",
            "descr": "Datera system version"
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "uuid": {
            "descr": "UUID of the system",
            "type": "string"
          },
          "name": {
            "descr": "Name of the system",
            "type": "string"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Available capacity of the cluster"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total capacity of the cluster"
          },
          "total_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of the cluster"
          },
          "dns": {
            "descr": "DNS information of the system",
            "containment": {
              "isCollection": false,
              "entity": "dns"
            }
          },
          "ntp_servers": {
            "descr": "NTP servers of the system",
            "containment": {
              "isCollection": true,
              "key": "ip",
              "entity": "ntp_server"
            }
          },
          "network": {
            "descr": "Network information of the system",
            "containment": {
              "isCollection": false,
              "entity": "network"
            }
          },
          "network_devices": {
            "descr": "Logical Network Device information of the system",
            "containment": {
              "isCollection": true,
              "key": "name",
              "entity": "networkDevice"
            }
          },
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is callhome enabled"
          },
          "http_proxy": {
            "descr": "HTTP Proxy information",
            "containment": {
              "isCollection": false,
              "entity": "http_proxy"
            }
          },
          "upgrade": {
            "descr": "System wide upgrade information",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "last_reboot_timestamp": {
            "type": "string",
            "descr": "Last time the cluster was restarted"
          },
          "uptime": {
            "type": "integer",
            "descr": "Milliseconds since last system reboot",
            "elapsed_time": "last_reboot_timestamp"
          },
          "hybrid_available_capacity": {
            "type": "integer",
            "descr": "Available capacity of hybrid nodes"
          },
          "hybrid_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of hybrid nodes"
          },
          "hybrid_total_capacity": {
            "type": "integer",
            "descr": "Total capacity of hybrid nodes"
          },
          "all_flash_available_capacity": {
            "type": "integer",
            "descr": "Available capacity of all-flash nodes"
          },
          "all_flash_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of all-flash nodes"
          },
          "all_flash_total_capacity": {
            "type": "integer",
            "descr": "Total capacity of all-flash nodes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "op_state": {
            "enum": [
              "unknwown",
              "initializing",
              "running",
              "maintenance",
              "degraded",
              "booting",
              "dead"
            ],
            "descr": "Operational state of the system"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the cluster"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the cluster"
          },
          "access_interface_aggr_type": {
            "enum": [
              "single",
              "bonded"
            ],
            "descr": "Access Network Interface Aggregation Type"
          },
          "internal_interface_aggr_type": {
            "enum": [
              "single",
              "bonded"
            ],
            "descr": "Internal Network Interface Aggregation Type"
          },
          "interface_aggregation_mode": {
            "enum": [
              "balance-rr",
              "active-backup",
              "balance-xor",
              "broadcast",
              "lacp",
              "balance-tlb",
              "balance-alb"
            ],
            "descr": "Network Interface Aggregation Mode"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system",
      "entity": "system",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "l3_enabled": {
            "type": "boolean",
            "descr": "Flag indicating whether this system is running in network layer 3 mode"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "sw_version": {
            "type": "string",
            "descr": "Datera system version"
          },
          "build_version": {
            "type": "string",
            "descr": "Datera build version"
          },
          "uuid": {
            "descr": "UUID of the system",
            "type": "string"
          },
          "name": {
            "descr": "Name of the system",
            "type": "string"
          },
          "available_capacity": {
            "type": "integer",
            "descr": "Available capacity of the cluster"
          },
          "total_capacity": {
            "type": "integer",
            "descr": "Total capacity of the cluster"
          },
          "total_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of the cluster"
          },
          "dns": {
            "descr": "DNS information of the system",
            "containment": {
              "isCollection": false,
              "entity": "dns"
            }
          },
          "ntp_servers": {
            "descr": "NTP servers of the system",
            "containment": {
              "isCollection": true,
              "key": "ip",
              "entity": "ntp_server"
            }
          },
          "network": {
            "descr": "Network information of the system",
            "containment": {
              "isCollection": false,
              "entity": "network"
            }
          },
          "network_devices": {
            "descr": "Logical Network Device information of the system",
            "containment": {
              "isCollection": true,
              "key": "name",
              "entity": "networkDevice"
            }
          },
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is callhome enabled"
          },
          "http_proxy": {
            "descr": "HTTP Proxy information",
            "containment": {
              "isCollection": false,
              "entity": "http_proxy"
            }
          },
          "upgrade": {
            "descr": "System wide upgrade information",
            "containment": {
              "isCollection": false,
              "entity": "upgrade"
            }
          },
          "last_reboot_timestamp": {
            "type": "string",
            "descr": "Last time the cluster was restarted"
          },
          "uptime": {
            "type": "integer",
            "descr": "Milliseconds since last system reboot",
            "elapsed_time": "last_reboot_timestamp"
          },
          "hybrid_available_capacity": {
            "type": "integer",
            "descr": "Available capacity of hybrid nodes"
          },
          "hybrid_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of hybrid nodes"
          },
          "hybrid_total_capacity": {
            "type": "integer",
            "descr": "Total capacity of hybrid nodes"
          },
          "all_flash_available_capacity": {
            "type": "integer",
            "descr": "Available capacity of all-flash nodes"
          },
          "all_flash_provisioned_capacity": {
            "type": "integer",
            "descr": "Provisioned capacity of all-flash nodes"
          },
          "all_flash_total_capacity": {
            "type": "integer",
            "descr": "Total capacity of all-flash nodes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "op_state": {
            "enum": [
              "unknwown",
              "initializing",
              "running",
              "maintenance",
              "degraded",
              "booting",
              "dead"
            ],
            "descr": "Operational state of the system"
          },
          "compression_enabled": {
            "type": "boolean",
            "descr": "Is compression enabled on the cluster"
          },
          "compression_ratio": {
            "type": "string",
            "descr": "Compression ratio of the cluster"
          },
          "access_interface_aggr_type": {
            "enum": [
              "single",
              "bonded"
            ],
            "descr": "Access Network Interface Aggregation Type"
          },
          "internal_interface_aggr_type": {
            "enum": [
              "single",
              "bonded"
            ],
            "descr": "Internal Network Interface Aggregation Type"
          },
          "interface_aggregation_mode": {
            "enum": [
              "balance-rr",
              "active-backup",
              "balance-xor",
              "broadcast",
              "lacp",
              "balance-tlb",
              "balance-alb"
            ],
            "descr": "Network Interface Aggregation Mode"
          }
        }
      }
    }
  },
  "/system/version_config": {},
  "/system/http_proxy": {
    "read": {
      "descr": "Show http proxy configuration information",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system/http_proxy",
      "entity": "http_proxy",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "enabled": {
            "type": "boolean",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Flag indicating whether the proxy is enabled",
            "fmthelp": "Must be a boolean"
          },
          "host": {
            "type": "string",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)",
            "descr": "HTTP proxy host name",
            "fmthelp": "Must be a valid host name"
          },
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "descr": "HTTP proxy port",
            "fmthelp": "Must be a boolean"
          },
          "user": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Auth user name",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "password": {
            "type": "string",
            "descr": "Auth password",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "update": {
      "descr": "Edit http proxy configuration information",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Flag indicating whether the proxy is enabled",
            "fmthelp": "Must be a boolean"
          },
          "host": {
            "type": "string",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)",
            "descr": "HTTP proxy host name",
            "fmthelp": "Must be a valid host name"
          },
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "descr": "HTTP proxy port",
            "fmthelp": "Must be a boolean"
          },
          "user": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Auth user name",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "password": {
            "type": "string",
            "descr": "Auth password",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      },
      "op": "update",
      "path": "/system/http_proxy",
      "entity": "http_proxy",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "enabled": {
            "type": "boolean",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Flag indicating whether the proxy is enabled",
            "fmthelp": "Must be a boolean"
          },
          "host": {
            "type": "string",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)",
            "descr": "HTTP proxy host name",
            "fmthelp": "Must be a valid host name"
          },
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "descr": "HTTP proxy port",
            "fmthelp": "Must be a boolean"
          },
          "user": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Auth user name",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "password": {
            "type": "string",
            "descr": "Auth password",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/http_proxy",
      "entity": "http_proxy",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "enabled": {
            "type": "boolean",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Flag indicating whether the proxy is enabled",
            "fmthelp": "Must be a boolean"
          },
          "host": {
            "type": "string",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)",
            "descr": "HTTP proxy host name",
            "fmthelp": "Must be a valid host name"
          },
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "descr": "HTTP proxy port",
            "fmthelp": "Must be a boolean"
          },
          "user": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Auth user name",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "password": {
            "type": "string",
            "descr": "Auth password",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/http_proxy",
      "entity": "http_proxy",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "enabled": {
            "type": "boolean",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Flag indicating whether the proxy is enabled",
            "fmthelp": "Must be a boolean"
          },
          "host": {
            "type": "string",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)",
            "descr": "HTTP proxy host name",
            "fmthelp": "Must be a valid host name"
          },
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "descr": "HTTP proxy port",
            "fmthelp": "Must be a boolean"
          },
          "user": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Auth user name",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "password": {
            "type": "string",
            "descr": "Auth password",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    }
  },
  "/system/ntp_servers": {
    "read": {
      "descr": "List all NTP servers configured in the system",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/system/ntp_servers",
      "entity": "ntp_server",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "ip": {
            "type": "string",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)",
            "maxLength": 255,
            "descr": "The IP address or hostname for the ntp_server",
            "fmthelp": "Must be a valid IP address or hostame"
          },
          "order": {
            "type": "integer",
            "descr": "Search order",
            "minimum": 0,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "update": {
      "group": "system_mgmt",
      "descr": "Update the NTP servers configured in the system",
      "minVersion": "1.0.0.0",
      "bodyParamSchema": {
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)",
          "maxLength": 255,
          "descr": "The IP address or hostname for the ntp_server",
          "fmthelp": "Must be a valid IP address or hostame"
        },
        "additionalProperties": false
      },
      "op": "update",
      "path": "/system/ntp_servers"
    }
  },
  "/system/dns": {
    "read": {
      "descr": "Show system DNS configuration",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system/dns",
      "entity": "dns",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "domain": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "The domain name for the DNS servers",
            "fmthelp": "Must be a domain name"
          }
        }
      }
    },
    "update": {
      "descr": "Update system DNS configuration",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "domain": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "The domain name for the DNS servers",
            "fmthelp": "Must be a domain name"
          }
        }
      },
      "op": "update",
      "path": "/system/dns",
      "entity": "dns",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "domain": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "The domain name for the DNS servers",
            "fmthelp": "Must be a domain name"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/dns",
      "entity": "dns",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "domain": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "The domain name for the DNS servers",
            "fmthelp": "Must be a domain name"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/dns",
      "entity": "dns",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "domain": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "The domain name for the DNS servers",
            "fmthelp": "Must be a domain name"
          }
        }
      }
    }
  },
  "/system/dns/servers": {
    "read": {
      "descr": "List all DNS servers configured in the system",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/system/dns/servers",
      "entity": "dns_server",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "ip": {
            "type": "string",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "descr": "The IP address for the DNS server",
            "fmthelp": "Must be a valid IP address"
          },
          "order": {
            "type": "integer",
            "descr": "Search order",
            "minimum": 0,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "update": {
      "group": "system_mgmt",
      "descr": "Update the DNS servers configured in the system",
      "minVersion": "1.0.0.0",
      "bodyParamSchema": {
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
          "descr": "The IP address for the DNS server",
          "fmthelp": "Must be a valid IP address"
        },
        "additionalProperties": false
      },
      "op": "update",
      "path": "/system/dns/servers"
    }
  },
  "/system/dns/search_domains": {
    "read": {
      "descr": "List all search domain entries configured in the system",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/system/dns/search_domains",
      "entity": "dns_search_domain",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "order": {
            "type": "integer",
            "descr": "Search order",
            "minimum": 0,
            "fmthelp": "Must be a positive integer"
          },
          "domain": {
            "type": "string",
            "descr": "Search domain",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)",
            "maxLength": 255,
            "fmthelp": "Must be a valid search domain name or IP address"
          }
        }
      }
    },
    "update": {
      "group": "system_mgmt",
      "descr": "Update the search domain entries configured in the system",
      "minVersion": "1.0.0.0",
      "bodyParamSchema": {
        "type": "array",
        "items": {
          "type": "string",
          "descr": "Search domain",
          "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)",
          "maxLength": 255,
          "fmthelp": "Must be a valid search domain name or IP address"
        },
        "additionalProperties": false
      },
      "op": "update",
      "path": "/system/dns/search_domains"
    }
  },
  "/system/network/mapping": {
    "read": {
      "descr": "Show system network configuration",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system/network/mapping",
      "entity": "network_mapping",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "access_1": {
            "type": "string",
            "descr": "Physical interface onto which the access_1 logical network is mapped"
          },
          "access_2": {
            "type": "string",
            "descr": "Physical interface onto which the access_2 logical network is mapped"
          },
          "internal_1": {
            "type": "string",
            "descr": "Physical interface onto which the internal_1 logical network is mapped"
          },
          "internal_2": {
            "type": "string",
            "descr": "Physical interface onto which the internal_2 logical network is mapped"
          },
          "mgmt_1": {
            "type": "string",
            "descr": "Physical interface onto which the mgmt_1 logical network is mapped"
          },
          "mgmt_2": {
            "type": "string",
            "descr": "Physical interface onto which the mgmt_2 logical network is mapped"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network/mapping",
      "entity": "network_mapping",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "access_1": {
            "type": "string",
            "descr": "Physical interface onto which the access_1 logical network is mapped"
          },
          "access_2": {
            "type": "string",
            "descr": "Physical interface onto which the access_2 logical network is mapped"
          },
          "internal_1": {
            "type": "string",
            "descr": "Physical interface onto which the internal_1 logical network is mapped"
          },
          "internal_2": {
            "type": "string",
            "descr": "Physical interface onto which the internal_2 logical network is mapped"
          },
          "mgmt_1": {
            "type": "string",
            "descr": "Physical interface onto which the mgmt_1 logical network is mapped"
          },
          "mgmt_2": {
            "type": "string",
            "descr": "Physical interface onto which the mgmt_2 logical network is mapped"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network/mapping",
      "entity": "network_mapping",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "access_1": {
            "type": "string",
            "descr": "Physical interface onto which the access_1 logical network is mapped"
          },
          "access_2": {
            "type": "string",
            "descr": "Physical interface onto which the access_2 logical network is mapped"
          },
          "internal_1": {
            "type": "string",
            "descr": "Physical interface onto which the internal_1 logical network is mapped"
          },
          "internal_2": {
            "type": "string",
            "descr": "Physical interface onto which the internal_2 logical network is mapped"
          },
          "mgmt_1": {
            "type": "string",
            "descr": "Physical interface onto which the mgmt_1 logical network is mapped"
          },
          "mgmt_2": {
            "type": "string",
            "descr": "Physical interface onto which the mgmt_2 logical network is mapped"
          }
        }
      }
    }
  },
  "/system/network": {
    "read": {
      "descr": "Show system network configuration",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system/network",
      "entity": "network",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "access_vip": {
            "descr": "Network info",
            "containment": {
              "isCollection": false,
              "entity": "vip"
            }
          },
          "mgmt_vip": {
            "descr": "Management VIP of the system",
            "containment": {
              "isCollection": false,
              "entity": "vip"
            }
          },
          "internal_network": {
            "descr": "Internal IP pool of the system",
            "containment": {
              "isCollection": false,
              "entity": "ip_pool"
            }
          },
          "mapping": {
            "descr": "Logical network to port mapping of the system",
            "containment": {
              "isCollection": false,
              "entity": "network_mapping"
            }
          },
          "access_networks": {
            "type": "array",
            "descr": "List of logical access networks",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network",
      "entity": "network",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "access_vip": {
            "descr": "Network info",
            "containment": {
              "isCollection": false,
              "entity": "vip"
            }
          },
          "mgmt_vip": {
            "descr": "Management VIP of the system",
            "containment": {
              "isCollection": false,
              "entity": "vip"
            }
          },
          "internal_network": {
            "descr": "Internal IP pool of the system",
            "containment": {
              "isCollection": false,
              "entity": "ip_pool"
            }
          },
          "mapping": {
            "descr": "Logical network to port mapping of the system",
            "containment": {
              "isCollection": false,
              "entity": "network_mapping"
            }
          },
          "access_networks": {
            "type": "array",
            "descr": "List of logical access networks",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network",
      "entity": "network",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "access_vip": {
            "descr": "Network info",
            "containment": {
              "isCollection": false,
              "entity": "vip"
            }
          },
          "mgmt_vip": {
            "descr": "Management VIP of the system",
            "containment": {
              "isCollection": false,
              "entity": "vip"
            }
          },
          "internal_network": {
            "descr": "Internal IP pool of the system",
            "containment": {
              "isCollection": false,
              "entity": "ip_pool"
            }
          },
          "mapping": {
            "descr": "Logical network to port mapping of the system",
            "containment": {
              "isCollection": false,
              "entity": "network_mapping"
            }
          },
          "access_networks": {
            "type": "array",
            "descr": "List of logical access networks",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "/system/network/access_vip": {
    "read": {
      "descr": "Read the access VIP",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system/network/access_vip",
      "entity": "vip",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the VIP",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "network_paths": {
            "descr": "Interfaces",
            "containment": {
              "key": "name",
              "entity": "ip_address",
              "isCollection": true
            }
          }
        }
      }
    },
    "stream": {
      "descr": "Read the access VIP",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network/access_vip",
      "entity": "vip",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the VIP",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "network_paths": {
            "descr": "Interfaces",
            "containment": {
              "key": "name",
              "entity": "ip_address",
              "isCollection": true
            }
          }
        }
      }
    },
    "live": {
      "descr": "Read the access VIP",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network/access_vip",
      "entity": "vip",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the VIP",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "network_paths": {
            "descr": "Interfaces",
            "containment": {
              "key": "name",
              "entity": "ip_address",
              "isCollection": true
            }
          }
        }
      }
    }
  },
  "/system/network/access_vip/network_paths": {
    "read": {
      "descr": "Read the access VIP IP blocks for all network paths",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/system/network/access_vip/network_paths",
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network/access_vip/network_paths",
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network/access_vip/network_paths",
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    }
  },
  "/system/network/access_vip/network_paths/:network_path": {
    "read": {
      "descr": "Read the IP block for a network path of the access VIP",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system/network/access_vip/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the VIP address resides",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_vip"
        }
      },
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    },
    "update": {
      "descr": "Update the IP block for a network path of the access VIP",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      },
      "op": "update",
      "path": "/system/network/access_vip/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the VIP address resides",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_vip"
        }
      },
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network/access_vip/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the VIP address resides",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_vip"
        }
      },
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network/access_vip/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the VIP address resides",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_vip"
        }
      },
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    }
  },
  "/system/network/mgmt_vip": {
    "read": {
      "descr": "Read the management VIP",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system/network/mgmt_vip",
      "entity": "vip",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the VIP",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "network_paths": {
            "descr": "Interfaces",
            "containment": {
              "key": "name",
              "entity": "ip_address",
              "isCollection": true
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network/mgmt_vip",
      "entity": "vip",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the VIP",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "network_paths": {
            "descr": "Interfaces",
            "containment": {
              "key": "name",
              "entity": "ip_address",
              "isCollection": true
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network/mgmt_vip",
      "entity": "vip",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the VIP",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "network_paths": {
            "descr": "Interfaces",
            "containment": {
              "key": "name",
              "entity": "ip_address",
              "isCollection": true
            }
          }
        }
      }
    }
  },
  "/system/network/mgmt_vip/network_paths": {
    "read": {
      "descr": "Read the management VIP IP blocks for all network paths",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/system/network/mgmt_vip/network_paths",
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network/mgmt_vip/network_paths",
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network/mgmt_vip/network_paths",
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    }
  },
  "/system/network/mgmt_vip/network_paths/:network_path": {
    "read": {
      "descr": "Read the IP block for a network path of the management VIP",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system/network/mgmt_vip/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the VIP address resides",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_vip"
        }
      },
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    },
    "update": {
      "descr": "Update the IP block for a network path of the management VIP",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      },
      "op": "update",
      "path": "/system/network/mgmt_vip/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the VIP address resides",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_vip"
        }
      },
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network/mgmt_vip/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the VIP address resides",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_vip"
        }
      },
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network/mgmt_vip/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the VIP address resides",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_vip"
        }
      },
      "entity": "ip_address",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the VIP address resides",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_vip"
          },
          "netmask": {
            "type": "integer",
            "descr": "Netmask of the VIP",
            "fmthelp": "Must be a valid integer between 1 and 32",
            "minimum": 1,
            "maximum": 32,
            "example": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the VIP",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set it to 0",
            "example": 5
          },
          "ip": {
            "type": "string",
            "descr": "The VIP address",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the VIP",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          }
        }
      }
    }
  },
  "/system/network/internal_network": {
    "read": {
      "descr": "Read the internal network",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system/network/internal_network",
      "entity": "ip_pool",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "descr": "List of IP blocks per interface",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "internal_ip_block"
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network/internal_network",
      "entity": "ip_pool",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "descr": "List of IP blocks per interface",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "internal_ip_block"
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network/internal_network",
      "entity": "ip_pool",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "descr": "List of IP blocks per interface",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "internal_ip_block"
            }
          }
        }
      }
    }
  },
  "/system/network/internal_network/network_paths": {
    "read": {
      "descr": "Read the internal network IP blocks for all network paths",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/system/network/internal_network/network_paths",
      "entity": "internal_ip_block",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network/internal_network/network_paths",
      "entity": "internal_ip_block",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network/internal_network/network_paths",
      "entity": "internal_ip_block",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    }
  },
  "/system/network/internal_network/network_paths/:network_path": {
    "read": {
      "descr": "Read the IP block for a network path of the internal network",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/system/network/internal_network/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the IP block resides"
        }
      },
      "entity": "internal_ip_block",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/system/network/internal_network/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the IP block resides"
        }
      },
      "entity": "internal_ip_block",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/system/network/internal_network/network_paths/:network_path",
      "urlParamSchema": {
        "network_path": {
          "type": "string",
          "descr": "Name of the logical network on which the IP block resides"
        }
      },
      "entity": "internal_ip_block",
      "minVersion": "1.0.0.0",
      "group": "system_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    }
  },
  "/access_network_ip_pools": {
    "read": {
      "descr": "Show all access network IP pools",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/access_network_ip_pools",
      "entity": "access_network_ip_pool",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "descr": "List of IP blocks per interface",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "ip_block"
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/access_network_ip_pools",
      "entity": "access_network_ip_pool",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "descr": "List of IP blocks per interface",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "ip_block"
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/access_network_ip_pools",
      "entity": "access_network_ip_pool",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "descr": "List of IP blocks per interface",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "ip_block"
            }
          }
        }
      }
    },
    "create": {
      "group": "resource_allocation",
      "descr": "Create an access network IP pool",
      "minVersion": "1.1.0.0",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "descr": "Name of the logical network on which the IP block resides"
                },
                "netmask": {
                  "type": "integer",
                  "descr": "Subnet mask of the IP pool in CIDR notation",
                  "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
                  "minimum": 16,
                  "maximum": 29,
                  "example": "16",
                  "default": 16
                },
                "vlan": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 4094,
                  "descr": "VLAN tag of the IP pool",
                  "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
                  "example": 5
                },
                "start_ip": {
                  "type": "string",
                  "descr": "Starting IP of the IP pool",
                  "fmthelp": "Must be a valid IP address",
                  "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                  "example": "172.30.105.2"
                },
                "range": {
                  "type": "integer",
                  "descr": "Number of host IP addresses in the pool",
                  "minimum": 6,
                  "maximum": 254,
                  "example": 24,
                  "default": 6
                },
                "mtu": {
                  "type": "integer",
                  "descr": "MTU of the IP pool",
                  "fmthelp": "Must be between 1500 and 9198",
                  "minimum": 1500,
                  "maximum": 9198
                },
                "gateway": {
                  "type": "string",
                  "descr": "The gateway",
                  "fmthelp": "Must be a valid IP address",
                  "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                  "example": "172.30.105.2"
                }
              },
              "required": [
                "start_ip",
                "range",
                "netmask"
              ],
              "additionalProperties": false
            },
            "descr": "List of IP blocks per interface",
            "additionalProperties": false
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "op": "create",
      "path": "/access_network_ip_pools"
    }
  },
  "/access_network_ip_pools/:pool_name": {
    "read": {
      "descr": "Show a single access network IP pool",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/access_network_ip_pools/:pool_name",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        }
      },
      "entity": "access_network_ip_pool",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "descr": "List of IP blocks per interface",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "ip_block"
            }
          }
        }
      }
    },
    "delete": {
      "descr": "Delete an access network IP pool",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/access_network_ip_pools/:pool_name",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        }
      },
      "entity": "access_network_ip_pool",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "descr": "List of IP blocks per interface",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "ip_block"
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/access_network_ip_pools/:pool_name",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        }
      },
      "entity": "access_network_ip_pool",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "descr": "List of IP blocks per interface",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "ip_block"
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/access_network_ip_pools/:pool_name",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        }
      },
      "entity": "access_network_ip_pool",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the IP pool",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "example": "test_ip_pool"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "descr": "List of IP blocks per interface",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "ip_block"
            }
          }
        }
      }
    },
    "update": {
      "group": "resource_allocation",
      "descr": "Update an access network IP pool",
      "minVersion": "1.1.0.0",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the logical network on which the IP block resides"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the IP pool",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "example": "My test IP pool"
          },
          "network_paths": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "descr": "Name of the logical network on which the IP block resides"
                },
                "netmask": {
                  "type": "integer",
                  "descr": "Subnet mask of the IP pool in CIDR notation",
                  "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
                  "minimum": 16,
                  "maximum": 29,
                  "example": "16",
                  "default": 16
                },
                "vlan": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 4094,
                  "descr": "VLAN tag of the IP pool",
                  "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
                  "example": 5
                },
                "start_ip": {
                  "type": "string",
                  "descr": "Starting IP of the IP pool",
                  "fmthelp": "Must be a valid IP address",
                  "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                  "example": "172.30.105.2"
                },
                "range": {
                  "type": "integer",
                  "descr": "Number of host IP addresses in the pool",
                  "minimum": 6,
                  "maximum": 254,
                  "example": 24,
                  "default": 6
                },
                "mtu": {
                  "type": "integer",
                  "descr": "MTU of the IP pool",
                  "fmthelp": "Must be between 1500 and 9198",
                  "minimum": 1500,
                  "maximum": 9198
                },
                "gateway": {
                  "type": "string",
                  "descr": "The gateway",
                  "fmthelp": "Must be a valid IP address",
                  "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                  "example": "172.30.105.2"
                }
              },
              "required": [
                "start_ip",
                "range",
                "netmask"
              ],
              "additionalProperties": false
            },
            "descr": "List of IP blocks per interface",
            "additionalProperties": false
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "op": "update",
      "path": "/access_network_ip_pools/:pool_name"
    }
  },
  "/access_network_ip_pools/:pool_name/network_paths": {
    "read": {
      "descr": "Show the IP blocks in the access network IP pool",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/access_network_ip_pools/:pool_name/network_paths",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        }
      },
      "entity": "ip_block",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/access_network_ip_pools/:pool_name/network_paths",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        }
      },
      "entity": "ip_block",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/access_network_ip_pools/:pool_name/network_paths",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        }
      },
      "entity": "ip_block",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    }
  },
  "/access_network_ip_pools/:pool_name/network_paths/:path_name": {
    "read": {
      "descr": "Show a single IP block",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/access_network_ip_pools/:pool_name/network_paths/:path_name",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        },
        "path_name": {
          "type": "string",
          "descr": "Name of the logical network on which the IP block resides"
        }
      },
      "entity": "ip_block",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    },
    "update": {
      "descr": "Update an IP block",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      },
      "op": "update",
      "path": "/access_network_ip_pools/:pool_name/network_paths/:path_name",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        },
        "path_name": {
          "type": "string",
          "descr": "Name of the logical network on which the IP block resides"
        }
      },
      "entity": "ip_block",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/access_network_ip_pools/:pool_name/network_paths/:path_name",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        },
        "path_name": {
          "type": "string",
          "descr": "Name of the logical network on which the IP block resides"
        }
      },
      "entity": "ip_block",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/access_network_ip_pools/:pool_name/network_paths/:path_name",
      "urlParamSchema": {
        "pool_name": {
          "type": "string",
          "descr": "Name of the IP pool",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "example": "test_ip_pool"
        },
        "path_name": {
          "type": "string",
          "descr": "Name of the logical network on which the IP block resides"
        }
      },
      "entity": "ip_block",
      "minVersion": "1.1.0.0",
      "group": "resource_allocation",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of the logical network on which the IP block resides"
          },
          "netmask": {
            "type": "integer",
            "descr": "Subnet mask of the IP pool in CIDR notation",
            "fmthelp": "Must be a valid integer between 16 and 29 (CIDR notation)",
            "minimum": 16,
            "maximum": 29,
            "example": "16",
            "default": 16
          },
          "vlan": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4094,
            "descr": "VLAN tag of the IP pool",
            "fmthelp": "Must be a number from 0 to 4096. To untag, set to 0",
            "example": 5
          },
          "start_ip": {
            "type": "string",
            "descr": "Starting IP of the IP pool",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          },
          "range": {
            "type": "integer",
            "descr": "Number of host IP addresses in the pool",
            "minimum": 6,
            "maximum": 254,
            "example": 24,
            "default": 6
          },
          "mtu": {
            "type": "integer",
            "descr": "MTU of the IP pool",
            "fmthelp": "Must be between 1500 and 9198",
            "minimum": 1500,
            "maximum": 9198
          },
          "gateway": {
            "type": "string",
            "descr": "The gateway",
            "fmthelp": "Must be a valid IP address",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "example": "172.30.105.2"
          }
        }
      }
    }
  },
  "/users": {
    "create": {
      "descr": "Create a new user",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "user_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "User ID for log in",
            "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
          },
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        },
        "required": [
          "user_id",
          "full_name",
          "password"
        ]
      },
      "op": "create",
      "path": "/users",
      "entity": "user",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "User ID for log in",
            "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
          },
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "version": {
            "type": "string",
            "descr": "Version",
            "fmthelp": "Version indicator"
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "read": {
      "descr": "List all users",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/users",
      "entity": "user",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "User ID for log in",
            "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
          },
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "version": {
            "type": "string",
            "descr": "Version",
            "fmthelp": "Version indicator"
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/users",
      "entity": "user",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "User ID for log in",
            "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
          },
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "version": {
            "type": "string",
            "descr": "Version",
            "fmthelp": "Version indicator"
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/users",
      "entity": "user",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "User ID for log in",
            "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
          },
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "version": {
            "type": "string",
            "descr": "Version",
            "fmthelp": "Version indicator"
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    }
  },
  "/users/:user_id": {
    "read": {
      "descr": "Show a single user",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/users/:user_id",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]{3,32}$",
          "descr": "User ID for log in",
          "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
        }
      },
      "entity": "user",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "User ID for log in",
            "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
          },
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "version": {
            "type": "string",
            "descr": "Version",
            "fmthelp": "Version indicator"
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "update": {
      "descr": "Update a user",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      },
      "op": "update",
      "path": "/users/:user_id",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]{3,32}$",
          "descr": "User ID for log in",
          "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
        }
      },
      "entity": "user",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "User ID for log in",
            "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
          },
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "version": {
            "type": "string",
            "descr": "Version",
            "fmthelp": "Version indicator"
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "delete": {
      "descr": "Delete a user",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/users/:user_id",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]{3,32}$",
          "descr": "User ID for log in",
          "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
        }
      },
      "entity": "user",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "User ID for log in",
            "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
          },
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "version": {
            "type": "string",
            "descr": "Version",
            "fmthelp": "Version indicator"
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/users/:user_id",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]{3,32}$",
          "descr": "User ID for log in",
          "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
        }
      },
      "entity": "user",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "User ID for log in",
            "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
          },
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "version": {
            "type": "string",
            "descr": "Version",
            "fmthelp": "Version indicator"
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/users/:user_id",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]{3,32}$",
          "descr": "User ID for log in",
          "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
        }
      },
      "entity": "user",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "User ID for log in",
            "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
          },
          "full_name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Full name of user",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "descr": "User's email address",
            "fmthelp": "Must be a valid email address",
            "maxLength": 254
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable or disable user (true or false)",
            "fmthelp": "Must be a boolean",
            "default": true
          },
          "roles": {
            "descr": "Roles associated with the user",
            "fmthelp": "Must be an array of paths pointing to role entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "role"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "User password",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "version": {
            "type": "string",
            "descr": "Version",
            "fmthelp": "Version indicator"
          },
          "tenants": {
            "descr": "Tenants this user has access to",
            "fmthelp": "Must be an array of tenant paths",
            "simple_reference": {
              "isCollection": true,
              "entity": "tenant"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    }
  },
  "/users/:user_id/roles": {
    "read": {
      "descr": "List the roles assigned to a user",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/users/:user_id/roles",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]{3,32}$",
          "descr": "User ID for log in",
          "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
        }
      },
      "entity": "role",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "role_id": {
            "type": "string",
            "descr": "Role name or identifier",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "privileges": {
            "descr": "List of privileges associated with this role",
            "fmthelp": "Must be an array of paths pointing to privilege entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "privilege"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "update": {
      "descr": "Modify the list of roles assigned to a user",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "descr": "path of object to add or remove from collection"
          },
          "op": {
            "type": "string",
            "descr": "type of operation (add or remove)",
            "enum": [
              "add",
              "remove"
            ]
          }
        },
        "required": [
          "path",
          "op"
        ]
      },
      "op": "update",
      "path": "/users/:user_id/roles",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]{3,32}$",
          "descr": "User ID for log in",
          "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
        }
      },
      "entity": "role",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "role_id": {
            "type": "string",
            "descr": "Role name or identifier",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "privileges": {
            "descr": "List of privileges associated with this role",
            "fmthelp": "Must be an array of paths pointing to privilege entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "privilege"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/users/:user_id/roles",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]{3,32}$",
          "descr": "User ID for log in",
          "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
        }
      },
      "entity": "role",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "role_id": {
            "type": "string",
            "descr": "Role name or identifier",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "privileges": {
            "descr": "List of privileges associated with this role",
            "fmthelp": "Must be an array of paths pointing to privilege entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "privilege"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/users/:user_id/roles",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]{3,32}$",
          "descr": "User ID for log in",
          "fmthelp": "must be a combination of letters, numbers, and underscores with no spaces and no longer than 32 characters"
        }
      },
      "entity": "role",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "role_id": {
            "type": "string",
            "descr": "Role name or identifier",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "privileges": {
            "descr": "List of privileges associated with this role",
            "fmthelp": "Must be an array of paths pointing to privilege entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "privilege"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    }
  },
  "/roles": {
    "read": {
      "descr": "List all roles configured in the system",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/roles",
      "entity": "role",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "role_id": {
            "type": "string",
            "descr": "Role name or identifier",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "privileges": {
            "descr": "List of privileges associated with this role",
            "fmthelp": "Must be an array of paths pointing to privilege entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "privilege"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/roles",
      "entity": "role",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "role_id": {
            "type": "string",
            "descr": "Role name or identifier",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "privileges": {
            "descr": "List of privileges associated with this role",
            "fmthelp": "Must be an array of paths pointing to privilege entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "privilege"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/roles",
      "entity": "role",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "role_id": {
            "type": "string",
            "descr": "Role name or identifier",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "privileges": {
            "descr": "List of privileges associated with this role",
            "fmthelp": "Must be an array of paths pointing to privilege entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "privilege"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    }
  },
  "/roles/:role_id": {
    "read": {
      "descr": "Show a single role",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/roles/:role_id",
      "urlParamSchema": {
        "role_id": {
          "type": "string",
          "descr": "Role name or identifier",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
          "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
        }
      },
      "entity": "role",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "role_id": {
            "type": "string",
            "descr": "Role name or identifier",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "privileges": {
            "descr": "List of privileges associated with this role",
            "fmthelp": "Must be an array of paths pointing to privilege entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "privilege"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/roles/:role_id",
      "urlParamSchema": {
        "role_id": {
          "type": "string",
          "descr": "Role name or identifier",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
          "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
        }
      },
      "entity": "role",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "role_id": {
            "type": "string",
            "descr": "Role name or identifier",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "privileges": {
            "descr": "List of privileges associated with this role",
            "fmthelp": "Must be an array of paths pointing to privilege entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "privilege"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/roles/:role_id",
      "urlParamSchema": {
        "role_id": {
          "type": "string",
          "descr": "Role name or identifier",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
          "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
        }
      },
      "entity": "role",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "role_id": {
            "type": "string",
            "descr": "Role name or identifier",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "privileges": {
            "descr": "List of privileges associated with this role",
            "fmthelp": "Must be an array of paths pointing to privilege entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "privilege"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    }
  },
  "/privileges": {},
  "/audit_logs": {
    "read": {
      "descr": "List all audit logs in the system",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/audit_logs",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt"
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "properties": {}
      },
      "op": "stream",
      "path": "/audit_logs",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt"
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "properties": {}
      },
      "op": "live",
      "path": "/audit_logs",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt"
    }
  },
  "/audit_logs/:id": {
    "read": {
      "descr": "Show a single audit log",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/audit_logs/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "Audit log UUID",
          "fmthelp": "Must be a valid UUID"
        }
      },
      "entity": "audit_log",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "Audit log UUID",
            "fmthelp": "Must be a valid UUID"
          },
          "description": {
            "type": "string",
            "descr": "Description of the audit log"
          },
          "object_type": {
            "type": "string",
            "descr": "The entity type for the audit log"
          },
          "object_name": {
            "type": "string",
            "descr": "The object name for the audit log"
          },
          "object_url": {
            "type": "string",
            "descr": "The url to view the object in the GUI"
          },
          "operation": {
            "descr": "The operation performed",
            "fmthelp": "Must be a valid operation",
            "enum": [
              "OBJECT_MODIFIED",
              "OBJECT_ADDED",
              "OBJECT_DELETED"
            ]
          },
          "session_info": {
            "type": "string",
            "descr": "Session info"
          },
          "timestamp": {
            "type": "string",
            "descr": "Timestamp of the operation"
          },
          "user": {
            "type": "string",
            "descr": "The user who performed the operation"
          },
          "param_info": {
            "type": "string",
            "descr": "Parameters passed in with the operation"
          },
          "version": {
            "type": "string",
            "descr": "The version of the API used"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/audit_logs/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "Audit log UUID",
          "fmthelp": "Must be a valid UUID"
        }
      },
      "entity": "audit_log",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "Audit log UUID",
            "fmthelp": "Must be a valid UUID"
          },
          "description": {
            "type": "string",
            "descr": "Description of the audit log"
          },
          "object_type": {
            "type": "string",
            "descr": "The entity type for the audit log"
          },
          "object_name": {
            "type": "string",
            "descr": "The object name for the audit log"
          },
          "object_url": {
            "type": "string",
            "descr": "The url to view the object in the GUI"
          },
          "operation": {
            "descr": "The operation performed",
            "fmthelp": "Must be a valid operation",
            "enum": [
              "OBJECT_MODIFIED",
              "OBJECT_ADDED",
              "OBJECT_DELETED"
            ]
          },
          "session_info": {
            "type": "string",
            "descr": "Session info"
          },
          "timestamp": {
            "type": "string",
            "descr": "Timestamp of the operation"
          },
          "user": {
            "type": "string",
            "descr": "The user who performed the operation"
          },
          "param_info": {
            "type": "string",
            "descr": "Parameters passed in with the operation"
          },
          "version": {
            "type": "string",
            "descr": "The version of the API used"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/audit_logs/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "Audit log UUID",
          "fmthelp": "Must be a valid UUID"
        }
      },
      "entity": "audit_log",
      "minVersion": "1.0.0.0",
      "group": "user_mgmt",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "Audit log UUID",
            "fmthelp": "Must be a valid UUID"
          },
          "description": {
            "type": "string",
            "descr": "Description of the audit log"
          },
          "object_type": {
            "type": "string",
            "descr": "The entity type for the audit log"
          },
          "object_name": {
            "type": "string",
            "descr": "The object name for the audit log"
          },
          "object_url": {
            "type": "string",
            "descr": "The url to view the object in the GUI"
          },
          "operation": {
            "descr": "The operation performed",
            "fmthelp": "Must be a valid operation",
            "enum": [
              "OBJECT_MODIFIED",
              "OBJECT_ADDED",
              "OBJECT_DELETED"
            ]
          },
          "session_info": {
            "type": "string",
            "descr": "Session info"
          },
          "timestamp": {
            "type": "string",
            "descr": "Timestamp of the operation"
          },
          "user": {
            "type": "string",
            "descr": "The user who performed the operation"
          },
          "param_info": {
            "type": "string",
            "descr": "Parameters passed in with the operation"
          },
          "version": {
            "type": "string",
            "descr": "The version of the API used"
          }
        }
      }
    }
  },
  "/event_logs": {
    "read": {
      "descr": "List all event logs",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/event_logs",
      "entity": "event_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "code": {
            "type": "string",
            "descr": "The code of the event log",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The id of the event log",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The GUI url of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The severity of the event log",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "timestamp": {
            "type": "string",
            "descr": "An ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "type": {
            "descr": "The type of event log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/event_logs",
      "entity": "event_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "code": {
            "type": "string",
            "descr": "The code of the event log",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The id of the event log",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The GUI url of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The severity of the event log",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "timestamp": {
            "type": "string",
            "descr": "An ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "type": {
            "descr": "The type of event log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/event_logs",
      "entity": "event_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "code": {
            "type": "string",
            "descr": "The code of the event log",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The id of the event log",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The GUI url of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The severity of the event log",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "timestamp": {
            "type": "string",
            "descr": "An ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "type": {
            "descr": "The type of event log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    }
  },
  "/event_logs/:id": {
    "read": {
      "descr": "Show a single event log",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/event_logs/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "descr": "The id of the event log",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
        }
      },
      "entity": "event_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "code": {
            "type": "string",
            "descr": "The code of the event log",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The id of the event log",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The GUI url of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The severity of the event log",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "timestamp": {
            "type": "string",
            "descr": "An ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "type": {
            "descr": "The type of event log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/event_logs/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "descr": "The id of the event log",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
        }
      },
      "entity": "event_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "code": {
            "type": "string",
            "descr": "The code of the event log",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The id of the event log",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The GUI url of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The severity of the event log",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "timestamp": {
            "type": "string",
            "descr": "An ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "type": {
            "descr": "The type of event log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/event_logs/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "descr": "The id of the event log",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
        }
      },
      "entity": "event_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "code": {
            "type": "string",
            "descr": "The code of the event log",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The id of the event log",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The GUI url of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The severity of the event log",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "timestamp": {
            "type": "string",
            "descr": "An ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "type": {
            "descr": "The type of event log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    }
  },
  "/fault_logs": {
    "read": {
      "descr": "List all fault logs in the system",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/fault_logs",
      "entity": "fault_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "integer",
            "descr": "The UNIX timestamp (ms) of this event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be an integer"
          },
          "acknowledged": {
            "type": "boolean",
            "descr": "Has the fault log been acknowledged",
            "fmthelp": "Must be a boolean"
          },
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the fault",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "count": {
            "type": "integer",
            "descr": "Number of times the fault has occurred",
            "minimum": 0,
            "fmthelp": "Must be a positive integer"
          },
          "cleared": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "code": {
            "type": "string",
            "descr": "The fault code",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The fault id",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The affected object url",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "repeat": {
            "type": "string",
            "descr": "Does this faul repeat",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The fault severity",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "type": {
            "descr": "The type of fault log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/fault_logs",
      "entity": "fault_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "integer",
            "descr": "The UNIX timestamp (ms) of this event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be an integer"
          },
          "acknowledged": {
            "type": "boolean",
            "descr": "Has the fault log been acknowledged",
            "fmthelp": "Must be a boolean"
          },
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the fault",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "count": {
            "type": "integer",
            "descr": "Number of times the fault has occurred",
            "minimum": 0,
            "fmthelp": "Must be a positive integer"
          },
          "cleared": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "code": {
            "type": "string",
            "descr": "The fault code",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The fault id",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The affected object url",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "repeat": {
            "type": "string",
            "descr": "Does this faul repeat",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The fault severity",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "type": {
            "descr": "The type of fault log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/fault_logs",
      "entity": "fault_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "integer",
            "descr": "The UNIX timestamp (ms) of this event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be an integer"
          },
          "acknowledged": {
            "type": "boolean",
            "descr": "Has the fault log been acknowledged",
            "fmthelp": "Must be a boolean"
          },
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the fault",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "count": {
            "type": "integer",
            "descr": "Number of times the fault has occurred",
            "minimum": 0,
            "fmthelp": "Must be a positive integer"
          },
          "cleared": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "code": {
            "type": "string",
            "descr": "The fault code",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The fault id",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The affected object url",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "repeat": {
            "type": "string",
            "descr": "Does this faul repeat",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The fault severity",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "type": {
            "descr": "The type of fault log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    }
  },
  "/fault_logs/:id": {
    "read": {
      "descr": "Show a single fault log",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/fault_logs/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "descr": "The fault id",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
        }
      },
      "entity": "fault_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "integer",
            "descr": "The UNIX timestamp (ms) of this event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be an integer"
          },
          "acknowledged": {
            "type": "boolean",
            "descr": "Has the fault log been acknowledged",
            "fmthelp": "Must be a boolean"
          },
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the fault",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "count": {
            "type": "integer",
            "descr": "Number of times the fault has occurred",
            "minimum": 0,
            "fmthelp": "Must be a positive integer"
          },
          "cleared": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "code": {
            "type": "string",
            "descr": "The fault code",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The fault id",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The affected object url",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "repeat": {
            "type": "string",
            "descr": "Does this faul repeat",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The fault severity",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "type": {
            "descr": "The type of fault log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/fault_logs/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "descr": "The fault id",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
        }
      },
      "entity": "fault_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "integer",
            "descr": "The UNIX timestamp (ms) of this event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be an integer"
          },
          "acknowledged": {
            "type": "boolean",
            "descr": "Has the fault log been acknowledged",
            "fmthelp": "Must be a boolean"
          },
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the fault",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "count": {
            "type": "integer",
            "descr": "Number of times the fault has occurred",
            "minimum": 0,
            "fmthelp": "Must be a positive integer"
          },
          "cleared": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "code": {
            "type": "string",
            "descr": "The fault code",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The fault id",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The affected object url",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "repeat": {
            "type": "string",
            "descr": "Does this faul repeat",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The fault severity",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "type": {
            "descr": "The type of fault log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/fault_logs/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "descr": "The fault id",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
        }
      },
      "entity": "fault_log",
      "minVersion": "1.0.0.0",
      "group": "monitoring",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "integer",
            "descr": "The UNIX timestamp (ms) of this event",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be an integer"
          },
          "acknowledged": {
            "type": "boolean",
            "descr": "Has the fault log been acknowledged",
            "fmthelp": "Must be a boolean"
          },
          "callhome_enabled": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "cause": {
            "type": "string",
            "descr": "The cause of the fault",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "count": {
            "type": "integer",
            "descr": "Number of times the fault has occurred",
            "minimum": 0,
            "fmthelp": "Must be a positive integer"
          },
          "cleared": {
            "type": "boolean",
            "descr": "Is call home enabled",
            "fmthelp": "Must be a boolean"
          },
          "code": {
            "type": "string",
            "descr": "The fault code",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "id": {
            "type": "string",
            "descr": "The fault id",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_id": {
            "type": "string",
            "descr": "The affected object id",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_type": {
            "type": "string",
            "descr": "The affected object type",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_url": {
            "type": "string",
            "descr": "The affected object url",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_path": {
            "type": "string",
            "descr": "The path of the affected object",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "object_tenant": {
            "type": "string",
            "descr": "The tenant of the affected object",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "fmthelp": "Must be path to a tenant"
          },
          "object_lbl": {
            "type": "string",
            "descr": "The affected object label",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "repeat": {
            "type": "string",
            "descr": "Does this faul repeat",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "severity": {
            "descr": "The fault severity",
            "fmthelp": "Must be a valid severity level: info, warning, critical",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "type": {
            "descr": "The type of fault log",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore",
            "enum": [
              "clone",
              "cluster",
              "hardware",
              "network",
              "operational",
              "profile",
              "server",
              "snapshot",
              "storage"
            ]
          }
        }
      }
    }
  },
  "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/snapshot_policies": {
    "create": {
      "descr": "Create a snapshot policy on a volume template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        },
        "required": [
          "name",
          "interval",
          "retention_count"
        ]
      },
      "op": "create",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/snapshot_policies",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "read": {
      "descr": "List all snapshot policies on a volume template",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/snapshot_policies",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/snapshot_policies",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/snapshot_policies",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    }
  },
  "/app_templates/:at_name/storage_templates/:st_name/volume_templates/:vt_name/snapshot_policies/:snapshot_policy_name": {
    "read": {
      "descr": "Show a single snapshot policy on a volume template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_templates/:at_name/storage_templates/:st_name/volume_templates/:vt_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "at_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "st_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "vt_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "update": {
      "descr": "Update a snapshot policy on a volume template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      },
      "op": "update",
      "path": "/app_templates/:at_name/storage_templates/:st_name/volume_templates/:vt_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "at_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "st_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "vt_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "delete": {
      "descr": "Delete a snapshot policy on a volume template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_templates/:at_name/storage_templates/:st_name/volume_templates/:vt_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "at_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "st_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "vt_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:at_name/storage_templates/:st_name/volume_templates/:vt_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "at_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "st_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "vt_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:at_name/storage_templates/:st_name/volume_templates/:vt_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "at_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "st_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "vt_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    }
  },
  "/app_templates/:name/storage_templates": {
    "read": {
      "descr": "List all storage templates",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_templates/:name/storage_templates",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "storage_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage template"
          },
          "volume_templates": {
            "descr": "Dictionary of volume templates contained within this storage template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume_template"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
            "type": "string"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:name/storage_templates",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "storage_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage template"
          },
          "volume_templates": {
            "descr": "Dictionary of volume templates contained within this storage template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume_template"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
            "type": "string"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:name/storage_templates",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "storage_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage template"
          },
          "volume_templates": {
            "descr": "Dictionary of volume templates contained within this storage template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume_template"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
            "type": "string"
          }
        }
      }
    },
    "create": {
      "group": "app_storage_design",
      "descr": "Create a new storage template within an application template",
      "minVersion": "1.0.0.0",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage template"
          },
          "volume_templates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for volume template"
                },
                "replica_count": {
                  "type": "integer",
                  "descr": "Data replication factor for the volume",
                  "minimum": 1,
                  "maximum": 5,
                  "fmthelp": "Must be an integer between 1 and 5"
                },
                "size": {
                  "type": "integer",
                  "descr": "Volume size in GiB",
                  "minimum": 1,
                  "maximum": 262144,
                  "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
                },
                "performance_policy": {
                  "type": "object",
                  "properties": {
                    "total_iops_max": {
                      "type": "integer",
                      "descr": "Maximum total IOPS (enforced independently of read and write limits)",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "total_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "read_iops_max": {
                      "type": "integer",
                      "descr": "Maximum read IOPS",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "write_iops_max": {
                      "type": "integer",
                      "descr": "Maximum write IOPS",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "read_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum read bandwidth (KiB per second)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "write_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum write bandwidth (KiB per second)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    }
                  },
                  "required": [],
                  "additionalProperties": false,
                  "descr": "Performance policy applied to this volume template"
                },
                "snapshot_policies": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                        "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                        "descr": "Name or label for snapshot policy"
                      },
                      "retention_count": {
                        "type": "integer",
                        "descr": "Total number of snapshots to retain on this schedule",
                        "minimum": 1,
                        "maximum": 256
                      },
                      "start_time": {
                        "type": "string",
                        "descr": "Must be an ISO8601 formatted timestamp",
                        "format": "date-time"
                      },
                      "interval": {
                        "enum": [
                          "1min",
                          "2min",
                          "15min",
                          "1hour",
                          "1day",
                          "1week",
                          "1month",
                          "1year"
                        ],
                        "internal_enums": [
                          "1min",
                          "2min"
                        ],
                        "descr": "Interval of time between snapshots on this schedule",
                        "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                      }
                    },
                    "required": [
                      "name",
                      "interval",
                      "retention_count"
                    ],
                    "additionalProperties": false
                  },
                  "descr": "Snapshot policies applied to this volume template",
                  "additionalProperties": false
                },
                "placement_mode": {
                  "enum": [
                    "hybrid",
                    "single_flash",
                    "all_flash"
                  ],
                  "descr": "Placement mode of the volume"
                }
              },
              "required": [
                "name",
                "size"
              ],
              "additionalProperties": false
            },
            "descr": "Array of volume templates contained within this storage template",
            "additionalProperties": false
          },
          "auth": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "descr": "The authentication type",
                "enum": [
                  "none",
                  "chap",
                  "mchap"
                ],
                "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
              },
              "initiator_user_name": {
                "type": "string",
                "descr": "The username credential of the initiator",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
              },
              "initiator_pswd": {
                "type": "string",
                "descr": "The password credential of the initiator",
                "minLength": 12,
                "maxLength": 16,
                "fmthelp": "Must be a valid string between 12 and 16 characters in length."
              },
              "target_user_name": {
                "type": "string",
                "descr": "The username credential of the target",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
              },
              "target_pswd": {
                "type": "string",
                "descr": "The password credential of the target",
                "minLength": 12,
                "maxLength": 16,
                "fmthelp": "Must be a valid string between 12 and 16 characters in length."
              }
            },
            "required": [
              "type"
            ],
            "additionalProperties": false,
            "descr": "iSCSI authentication settings"
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "op": "create",
      "path": "/app_templates/:name/storage_templates"
    }
  },
  "/app_templates/:app_template_name/storage_templates/:storage_template_name": {
    "read": {
      "descr": "Show a single storage template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "storage_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage template"
          },
          "volume_templates": {
            "descr": "Dictionary of volume templates contained within this storage template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume_template"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
            "type": "string"
          }
        }
      }
    },
    "delete": {
      "descr": "Update a storage template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "storage_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage template"
          },
          "volume_templates": {
            "descr": "Dictionary of volume templates contained within this storage template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume_template"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
            "type": "string"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "storage_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage template"
          },
          "volume_templates": {
            "descr": "Dictionary of volume templates contained within this storage template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume_template"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
            "type": "string"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "storage_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage template"
          },
          "volume_templates": {
            "descr": "Dictionary of volume templates contained within this storage template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume_template"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
            "type": "string"
          }
        }
      }
    },
    "update": {
      "group": "app_storage_design",
      "descr": "Update an existing storage template",
      "minVersion": "1.0.0.0",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "volume_templates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for volume template"
                },
                "replica_count": {
                  "type": "integer",
                  "descr": "Data replication factor for the volume",
                  "minimum": 1,
                  "maximum": 5,
                  "fmthelp": "Must be an integer between 1 and 5"
                },
                "size": {
                  "type": "integer",
                  "descr": "Volume size in GiB",
                  "minimum": 1,
                  "maximum": 262144,
                  "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
                },
                "performance_policy": {
                  "type": "object",
                  "properties": {
                    "total_iops_max": {
                      "type": "integer",
                      "descr": "Maximum total IOPS (enforced independently of read and write limits)",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "total_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "read_iops_max": {
                      "type": "integer",
                      "descr": "Maximum read IOPS",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "write_iops_max": {
                      "type": "integer",
                      "descr": "Maximum write IOPS",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "read_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum read bandwidth (KiB per second)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "write_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum write bandwidth (KiB per second)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    }
                  },
                  "required": [],
                  "additionalProperties": false,
                  "descr": "Performance policy applied to this volume template"
                },
                "snapshot_policies": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                        "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                        "descr": "Name or label for snapshot policy"
                      },
                      "retention_count": {
                        "type": "integer",
                        "descr": "Total number of snapshots to retain on this schedule",
                        "minimum": 1,
                        "maximum": 256
                      },
                      "start_time": {
                        "type": "string",
                        "descr": "Must be an ISO8601 formatted timestamp",
                        "format": "date-time"
                      },
                      "interval": {
                        "enum": [
                          "1min",
                          "2min",
                          "15min",
                          "1hour",
                          "1day",
                          "1week",
                          "1month",
                          "1year"
                        ],
                        "internal_enums": [
                          "1min",
                          "2min"
                        ],
                        "descr": "Interval of time between snapshots on this schedule",
                        "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                      }
                    },
                    "required": [
                      "name",
                      "interval",
                      "retention_count"
                    ],
                    "additionalProperties": false
                  },
                  "descr": "Snapshot policies applied to this volume template",
                  "additionalProperties": false
                },
                "placement_mode": {
                  "enum": [
                    "hybrid",
                    "single_flash",
                    "all_flash"
                  ],
                  "descr": "Placement mode of the volume"
                }
              },
              "required": [
                "name",
                "size"
              ],
              "additionalProperties": false
            },
            "descr": "Array of volume templates contained within this storage template",
            "additionalProperties": false
          },
          "auth": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "descr": "The authentication type",
                "enum": [
                  "none",
                  "chap",
                  "mchap"
                ],
                "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
              },
              "initiator_user_name": {
                "type": "string",
                "descr": "The username credential of the initiator",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
              },
              "initiator_pswd": {
                "type": "string",
                "descr": "The password credential of the initiator",
                "minLength": 12,
                "maxLength": 16,
                "fmthelp": "Must be a valid string between 12 and 16 characters in length."
              },
              "target_user_name": {
                "type": "string",
                "descr": "The username credential of the target",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
              },
              "target_pswd": {
                "type": "string",
                "descr": "The password credential of the target",
                "minLength": 12,
                "maxLength": 16,
                "fmthelp": "Must be a valid string between 12 and 16 characters in length."
              }
            },
            "required": [
              "type"
            ],
            "additionalProperties": false,
            "descr": "iSCSI authentication settings"
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
            "type": "string"
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "op": "update",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name"
    }
  },
  "/app_templates/:app_template_name/storage_templates/:storage_template_name/auth": {
    "read": {
      "descr": "Show the authentication settings on a storage template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/auth",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "auth",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "type": {
            "type": "string",
            "descr": "The authentication type",
            "enum": [
              "none",
              "chap",
              "mchap"
            ],
            "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
          },
          "initiator_user_name": {
            "type": "string",
            "descr": "The username credential of the initiator",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "initiator_pswd": {
            "type": "string",
            "descr": "The password credential of the initiator",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          },
          "target_user_name": {
            "type": "string",
            "descr": "The username credential of the target",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "target_pswd": {
            "type": "string",
            "descr": "The password credential of the target",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          }
        }
      }
    },
    "update": {
      "descr": "Update the authentication settings on a storage template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "descr": "The authentication type",
            "enum": [
              "none",
              "chap",
              "mchap"
            ],
            "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
          },
          "initiator_user_name": {
            "type": "string",
            "descr": "The username credential of the initiator",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "initiator_pswd": {
            "type": "string",
            "descr": "The password credential of the initiator",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          },
          "target_user_name": {
            "type": "string",
            "descr": "The username credential of the target",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "target_pswd": {
            "type": "string",
            "descr": "The password credential of the target",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          }
        }
      },
      "op": "update",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/auth",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "auth",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "type": {
            "type": "string",
            "descr": "The authentication type",
            "enum": [
              "none",
              "chap",
              "mchap"
            ],
            "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
          },
          "initiator_user_name": {
            "type": "string",
            "descr": "The username credential of the initiator",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "initiator_pswd": {
            "type": "string",
            "descr": "The password credential of the initiator",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          },
          "target_user_name": {
            "type": "string",
            "descr": "The username credential of the target",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "target_pswd": {
            "type": "string",
            "descr": "The password credential of the target",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/auth",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "auth",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "type": {
            "type": "string",
            "descr": "The authentication type",
            "enum": [
              "none",
              "chap",
              "mchap"
            ],
            "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
          },
          "initiator_user_name": {
            "type": "string",
            "descr": "The username credential of the initiator",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "initiator_pswd": {
            "type": "string",
            "descr": "The password credential of the initiator",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          },
          "target_user_name": {
            "type": "string",
            "descr": "The username credential of the target",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "target_pswd": {
            "type": "string",
            "descr": "The password credential of the target",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/auth",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "auth",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "type": {
            "type": "string",
            "descr": "The authentication type",
            "enum": [
              "none",
              "chap",
              "mchap"
            ],
            "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
          },
          "initiator_user_name": {
            "type": "string",
            "descr": "The username credential of the initiator",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "initiator_pswd": {
            "type": "string",
            "descr": "The password credential of the initiator",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          },
          "target_user_name": {
            "type": "string",
            "descr": "The username credential of the target",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "target_pswd": {
            "type": "string",
            "descr": "The password credential of the target",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          }
        }
      }
    }
  },
  "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates": {
    "create": {
      "descr": "Create a new volume templates on a storage template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for volume template"
          },
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        },
        "required": [
          "name",
          "size"
        ]
      },
      "op": "create",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "volume_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for volume template"
          },
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      }
    },
    "read": {
      "descr": "List all volume templates on a storage template",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "volume_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for volume template"
          },
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "volume_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for volume template"
          },
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        }
      },
      "entity": "volume_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for volume template"
          },
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      }
    }
  },
  "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name": {
    "read": {
      "descr": "Show a single volume template on a storage template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "volume_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for volume template"
          },
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      }
    },
    "update": {
      "descr": "Update a volume template on a storage template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      },
      "op": "update",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "volume_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for volume template"
          },
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      }
    },
    "delete": {
      "descr": "Delete a volume template on a storage template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "volume_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for volume template"
          },
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "volume_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for volume template"
          },
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "volume_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for volume template"
          },
          "replica_count": {
            "type": "integer",
            "descr": "Data replication factor for the volume",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be an integer between 1 and 5"
          },
          "size": {
            "type": "integer",
            "descr": "Volume size in GiB",
            "minimum": 1,
            "maximum": 262144,
            "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      }
    }
  },
  "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/performance_policy": {
    "create": {
      "descr": "Create a performance policy on a volume template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        },
        "required": []
      },
      "op": "create",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/performance_policy",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "read": {
      "descr": "Show the performance policy on a volume template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/performance_policy",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "update": {
      "descr": "Update the performance policy on a volume template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      },
      "op": "update",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/performance_policy",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "delete": {
      "descr": "Delete the performance policy on a volume template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/performance_policy",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/performance_policy",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:app_template_name/storage_templates/:storage_template_name/volume_templates/:volume_template_name/performance_policy",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "storage_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage template"
        },
        "volume_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for volume template"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy": {
    "read": {
      "descr": "Show the ACL policy on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "acl_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "initiators": {
            "descr": "Initiators associated with the acl policy",
            "fmthelp": "Must be an array of paths pointing to storage template entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "initiator_groups": {
            "descr": "Initiator groups associated with the acl policy",
            "fmthelp": "Must be an array of paths pointing to storage template entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator_group"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "update": {
      "descr": "Update the ACL policy on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "initiators": {
            "descr": "Initiators associated with the acl policy",
            "fmthelp": "Must be an array of paths pointing to storage template entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "initiator_groups": {
            "descr": "Initiator groups associated with the acl policy",
            "fmthelp": "Must be an array of paths pointing to storage template entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator_group"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      },
      "op": "update",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "acl_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "initiators": {
            "descr": "Initiators associated with the acl policy",
            "fmthelp": "Must be an array of paths pointing to storage template entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "initiator_groups": {
            "descr": "Initiator groups associated with the acl policy",
            "fmthelp": "Must be an array of paths pointing to storage template entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator_group"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "acl_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "initiators": {
            "descr": "Initiators associated with the acl policy",
            "fmthelp": "Must be an array of paths pointing to storage template entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "initiator_groups": {
            "descr": "Initiator groups associated with the acl policy",
            "fmthelp": "Must be an array of paths pointing to storage template entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator_group"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "acl_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "initiators": {
            "descr": "Initiators associated with the acl policy",
            "fmthelp": "Must be an array of paths pointing to storage template entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "initiator_groups": {
            "descr": "Initiator groups associated with the acl policy",
            "fmthelp": "Must be an array of paths pointing to storage template entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator_group"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy/initiators": {
    "read": {
      "descr": "List all initiators on an ACL policy on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy/initiators",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "update": {
      "descr": "Modify the initiators on an ACL policy on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "descr": "path of object to add or remove from collection"
          },
          "op": {
            "type": "string",
            "descr": "type of operation (add or remove)",
            "enum": [
              "add",
              "remove"
            ]
          }
        },
        "required": [
          "path",
          "op"
        ]
      },
      "op": "update",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy/initiators",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy/initiators",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy/initiators",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "initiator",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "pattern": "((?=.{16,223}$)^iqn\\.[0-9]{4}-[0-1][0-9]\\.[^\\/]*\\.[^\\/]*$)|(^eui\\.[0-9A-Fa-f]{16}$)",
            "descr": "Initiator IQN or EUI",
            "fmthelp": "Must be in valid IQN or EUI format"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Name or label for initiator",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy/initiator_groups": {
    "read": {
      "descr": "List all initiator groups on an ACL policy on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy/initiator_groups",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "update": {
      "descr": "Modify the initiator groups on an ACL policy on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)",
            "descr": "path of object to add or remove from collection"
          },
          "op": {
            "type": "string",
            "descr": "type of operation (add or remove)",
            "enum": [
              "add",
              "remove"
            ]
          }
        },
        "required": [
          "path",
          "op"
        ]
      },
      "op": "update",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy/initiator_groups",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy/initiator_groups",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/acl_policy/initiator_groups",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "initiator_group",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "descr": "Name of initiator group",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "members": {
            "descr": "Initiators associated with the initiator group",
            "fmthelp": "Must be an array of paths pointing to initiator entities",
            "simple_reference": {
              "isCollection": true,
              "entity": "initiator"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/volumes": {
    "create": {
      "descr": "Create a volume on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for the volume"
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        },
        "required": [
          "name",
          "size"
        ]
      },
      "op": "create",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "volume",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for the volume"
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "uuid": {
            "descr": "Volume UUID",
            "type": "string"
          },
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "capacity_in_use": {
            "descr": "Provisioned storage capacity in use in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number",
            "minimum": 0
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshots": {
            "descr": "Snapshots taken of the volume",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          },
          "op_state": {
            "descr": "Operational state, indicating any active operations currently in progress on this volume",
            "type": "string"
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the volume is placed on",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "op_status": {
            "enum": [
              "internal_operation_in_progress",
              "replica_change_in_progress",
              "volume_resize_in_progress",
              "placement_change_in_progress"
            ],
            "descr": "Operation that is currently going on the volume",
            "default": "none"
          },
          "availability_state": {
            "enum": [
              "available",
              "unavailable"
            ],
            "descr": "Indicates whether the volume is online and available for I/O"
          },
          "recovery_state": {
            "enum": [
              "recovery_in_progress",
              "recovery_pending",
              "recovery_failed"
            ],
            "descr": "Indicates data recovery-related operations on this volume"
          },
          "storage_state": {
            "enum": [
              "replicas_degraded",
              "flash_degraded"
            ],
            "descr": "State of the volume's underlying data storage"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "read": {
      "descr": "List all volumes on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "volume",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for the volume"
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "uuid": {
            "descr": "Volume UUID",
            "type": "string"
          },
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "capacity_in_use": {
            "descr": "Provisioned storage capacity in use in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number",
            "minimum": 0
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshots": {
            "descr": "Snapshots taken of the volume",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          },
          "op_state": {
            "descr": "Operational state, indicating any active operations currently in progress on this volume",
            "type": "string"
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the volume is placed on",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "op_status": {
            "enum": [
              "internal_operation_in_progress",
              "replica_change_in_progress",
              "volume_resize_in_progress",
              "placement_change_in_progress"
            ],
            "descr": "Operation that is currently going on the volume",
            "default": "none"
          },
          "availability_state": {
            "enum": [
              "available",
              "unavailable"
            ],
            "descr": "Indicates whether the volume is online and available for I/O"
          },
          "recovery_state": {
            "enum": [
              "recovery_in_progress",
              "recovery_pending",
              "recovery_failed"
            ],
            "descr": "Indicates data recovery-related operations on this volume"
          },
          "storage_state": {
            "enum": [
              "replicas_degraded",
              "flash_degraded"
            ],
            "descr": "State of the volume's underlying data storage"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "volume",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for the volume"
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "uuid": {
            "descr": "Volume UUID",
            "type": "string"
          },
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "capacity_in_use": {
            "descr": "Provisioned storage capacity in use in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number",
            "minimum": 0
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshots": {
            "descr": "Snapshots taken of the volume",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          },
          "op_state": {
            "descr": "Operational state, indicating any active operations currently in progress on this volume",
            "type": "string"
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the volume is placed on",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "op_status": {
            "enum": [
              "internal_operation_in_progress",
              "replica_change_in_progress",
              "volume_resize_in_progress",
              "placement_change_in_progress"
            ],
            "descr": "Operation that is currently going on the volume",
            "default": "none"
          },
          "availability_state": {
            "enum": [
              "available",
              "unavailable"
            ],
            "descr": "Indicates whether the volume is online and available for I/O"
          },
          "recovery_state": {
            "enum": [
              "recovery_in_progress",
              "recovery_pending",
              "recovery_failed"
            ],
            "descr": "Indicates data recovery-related operations on this volume"
          },
          "storage_state": {
            "enum": [
              "replicas_degraded",
              "flash_degraded"
            ],
            "descr": "State of the volume's underlying data storage"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "volume",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for the volume"
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "uuid": {
            "descr": "Volume UUID",
            "type": "string"
          },
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "capacity_in_use": {
            "descr": "Provisioned storage capacity in use in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number",
            "minimum": 0
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshots": {
            "descr": "Snapshots taken of the volume",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          },
          "op_state": {
            "descr": "Operational state, indicating any active operations currently in progress on this volume",
            "type": "string"
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the volume is placed on",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "op_status": {
            "enum": [
              "internal_operation_in_progress",
              "replica_change_in_progress",
              "volume_resize_in_progress",
              "placement_change_in_progress"
            ],
            "descr": "Operation that is currently going on the volume",
            "default": "none"
          },
          "availability_state": {
            "enum": [
              "available",
              "unavailable"
            ],
            "descr": "Indicates whether the volume is online and available for I/O"
          },
          "recovery_state": {
            "enum": [
              "recovery_in_progress",
              "recovery_pending",
              "recovery_failed"
            ],
            "descr": "Indicates data recovery-related operations on this volume"
          },
          "storage_state": {
            "enum": [
              "replicas_degraded",
              "flash_degraded"
            ],
            "descr": "State of the volume's underlying data storage"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name": {
    "read": {
      "descr": "Show a single volume on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "volume",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for the volume"
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "uuid": {
            "descr": "Volume UUID",
            "type": "string"
          },
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "capacity_in_use": {
            "descr": "Provisioned storage capacity in use in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number",
            "minimum": 0
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshots": {
            "descr": "Snapshots taken of the volume",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          },
          "op_state": {
            "descr": "Operational state, indicating any active operations currently in progress on this volume",
            "type": "string"
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the volume is placed on",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "op_status": {
            "enum": [
              "internal_operation_in_progress",
              "replica_change_in_progress",
              "volume_resize_in_progress",
              "placement_change_in_progress"
            ],
            "descr": "Operation that is currently going on the volume",
            "default": "none"
          },
          "availability_state": {
            "enum": [
              "available",
              "unavailable"
            ],
            "descr": "Indicates whether the volume is online and available for I/O"
          },
          "recovery_state": {
            "enum": [
              "recovery_in_progress",
              "recovery_pending",
              "recovery_failed"
            ],
            "descr": "Indicates data recovery-related operations on this volume"
          },
          "storage_state": {
            "enum": [
              "replicas_degraded",
              "flash_degraded"
            ],
            "descr": "State of the volume's underlying data storage"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "update": {
      "descr": "Update a volume on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          }
        }
      },
      "op": "update",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "volume",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for the volume"
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "uuid": {
            "descr": "Volume UUID",
            "type": "string"
          },
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "capacity_in_use": {
            "descr": "Provisioned storage capacity in use in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number",
            "minimum": 0
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshots": {
            "descr": "Snapshots taken of the volume",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          },
          "op_state": {
            "descr": "Operational state, indicating any active operations currently in progress on this volume",
            "type": "string"
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the volume is placed on",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "op_status": {
            "enum": [
              "internal_operation_in_progress",
              "replica_change_in_progress",
              "volume_resize_in_progress",
              "placement_change_in_progress"
            ],
            "descr": "Operation that is currently going on the volume",
            "default": "none"
          },
          "availability_state": {
            "enum": [
              "available",
              "unavailable"
            ],
            "descr": "Indicates whether the volume is online and available for I/O"
          },
          "recovery_state": {
            "enum": [
              "recovery_in_progress",
              "recovery_pending",
              "recovery_failed"
            ],
            "descr": "Indicates data recovery-related operations on this volume"
          },
          "storage_state": {
            "enum": [
              "replicas_degraded",
              "flash_degraded"
            ],
            "descr": "State of the volume's underlying data storage"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "delete": {
      "descr": "Delete a volume on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "volume",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for the volume"
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "uuid": {
            "descr": "Volume UUID",
            "type": "string"
          },
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "capacity_in_use": {
            "descr": "Provisioned storage capacity in use in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number",
            "minimum": 0
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshots": {
            "descr": "Snapshots taken of the volume",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          },
          "op_state": {
            "descr": "Operational state, indicating any active operations currently in progress on this volume",
            "type": "string"
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the volume is placed on",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "op_status": {
            "enum": [
              "internal_operation_in_progress",
              "replica_change_in_progress",
              "volume_resize_in_progress",
              "placement_change_in_progress"
            ],
            "descr": "Operation that is currently going on the volume",
            "default": "none"
          },
          "availability_state": {
            "enum": [
              "available",
              "unavailable"
            ],
            "descr": "Indicates whether the volume is online and available for I/O"
          },
          "recovery_state": {
            "enum": [
              "recovery_in_progress",
              "recovery_pending",
              "recovery_failed"
            ],
            "descr": "Indicates data recovery-related operations on this volume"
          },
          "storage_state": {
            "enum": [
              "replicas_degraded",
              "flash_degraded"
            ],
            "descr": "State of the volume's underlying data storage"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "volume",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for the volume"
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "uuid": {
            "descr": "Volume UUID",
            "type": "string"
          },
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "capacity_in_use": {
            "descr": "Provisioned storage capacity in use in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number",
            "minimum": 0
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshots": {
            "descr": "Snapshots taken of the volume",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          },
          "op_state": {
            "descr": "Operational state, indicating any active operations currently in progress on this volume",
            "type": "string"
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the volume is placed on",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "op_status": {
            "enum": [
              "internal_operation_in_progress",
              "replica_change_in_progress",
              "volume_resize_in_progress",
              "placement_change_in_progress"
            ],
            "descr": "Operation that is currently going on the volume",
            "default": "none"
          },
          "availability_state": {
            "enum": [
              "available",
              "unavailable"
            ],
            "descr": "Indicates whether the volume is online and available for I/O"
          },
          "recovery_state": {
            "enum": [
              "recovery_in_progress",
              "recovery_pending",
              "recovery_failed"
            ],
            "descr": "Indicates data recovery-related operations on this volume"
          },
          "storage_state": {
            "enum": [
              "replicas_degraded",
              "flash_degraded"
            ],
            "descr": "State of the volume's underlying data storage"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "volume",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for the volume"
          },
          "replica_count": {
            "descr": "Data replication factor for the volume",
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
          },
          "uuid": {
            "descr": "Volume UUID",
            "type": "string"
          },
          "size": {
            "descr": "Provisioned storage capacity in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
            "minimum": 1,
            "maximum": 32768
          },
          "capacity_in_use": {
            "descr": "Provisioned storage capacity in use in GiB",
            "type": "number",
            "fmthelp": "Must be a valid positive number",
            "minimum": 0
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshots": {
            "descr": "Snapshots taken of the volume",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "placement_mode": {
            "enum": [
              "hybrid",
              "single_flash",
              "all_flash"
            ],
            "descr": "Placement mode of the volume"
          },
          "op_state": {
            "descr": "Operational state, indicating any active operations currently in progress on this volume",
            "type": "string"
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the volume is placed on",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "op_status": {
            "enum": [
              "internal_operation_in_progress",
              "replica_change_in_progress",
              "volume_resize_in_progress",
              "placement_change_in_progress"
            ],
            "descr": "Operation that is currently going on the volume",
            "default": "none"
          },
          "availability_state": {
            "enum": [
              "available",
              "unavailable"
            ],
            "descr": "Indicates whether the volume is online and available for I/O"
          },
          "recovery_state": {
            "enum": [
              "recovery_in_progress",
              "recovery_pending",
              "recovery_failed"
            ],
            "descr": "Indicates data recovery-related operations on this volume"
          },
          "storage_state": {
            "enum": [
              "replicas_degraded",
              "flash_degraded"
            ],
            "descr": "State of the volume's underlying data storage"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/performance_policy": {
    "create": {
      "descr": "Create a performance policy on a volume",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        },
        "required": []
      },
      "op": "create",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/performance_policy",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "read": {
      "descr": "Show the performance policy on a volume",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/performance_policy",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "update": {
      "descr": "Update the performance policy on a volume",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      },
      "op": "update",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/performance_policy",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "delete": {
      "descr": "Delete the performance policy on a volume",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/performance_policy",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/performance_policy",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/performance_policy",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "performance_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "total_iops_max": {
            "type": "integer",
            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "total_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "read_iops_max": {
            "type": "integer",
            "descr": "Maximum read IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "write_iops_max": {
            "type": "integer",
            "descr": "Maximum write IOPS",
            "minimum": 0,
            "maximum": 10000000,
            "fmthelp": "Must be a positive integer"
          },
          "read_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum read bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          },
          "write_bandwidth_max": {
            "type": "integer",
            "descr": "Maximum write bandwidth (KiB per second)",
            "minimum": 0,
            "maximum": 10240000,
            "fmthelp": "Must be a positive integer"
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies": {
    "create": {
      "descr": "Create a snapshot policy on a volume",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        },
        "required": [
          "name",
          "interval",
          "retention_count"
        ]
      },
      "op": "create",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "read": {
      "descr": "List all snapshot policies on a volume",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies/:snapshot_policy_name": {
    "read": {
      "descr": "Show a single snapshot policy on a volume",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "update": {
      "descr": "Update a snapshot policy on a volume",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      },
      "op": "update",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "delete": {
      "descr": "Delete a snapshot policy on a volume",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshots": {
    "create": {
      "descr": "Take a snapshot of a volume immediately",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          }
        },
        "required": []
      },
      "op": "create",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshots",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "read": {
      "descr": "List all the snapshots taken of a volume",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshots",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshots",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshots",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshots/:timestamp": {
    "read": {
      "descr": "Show a single snapshot of a volume",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshots/:timestamp",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        },
        "timestamp": {
          "type": "string",
          "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "delete": {
      "descr": "Delete a snapshot of a volume",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshots/:timestamp",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        },
        "timestamp": {
          "type": "string",
          "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshots/:timestamp",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        },
        "timestamp": {
          "type": "string",
          "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/volumes/:volume_name/snapshots/:timestamp",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        },
        "volume_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for the volume"
        },
        "timestamp": {
          "type": "string",
          "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    }
  },
  "/app_instances/:id/storage_instances": {
    "read": {
      "descr": "List all storage instances on an app instance",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "storage_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage instance"
          },
          "admin_state": {
            "descr": "Admin state of the storage instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "op_state": {
            "descr": "Operational state of the storage instance",
            "enum": [
              "available",
              "unavailable",
              "failed"
            ]
          },
          "volumes": {
            "descr": "Dictionary of volumes contained within this storage instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume"
            }
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "acl_policy": {
            "descr": "ACL policy applied to this storage instance",
            "containment": {
              "isCollection": false,
              "entity": "acl_policy"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
            "resolved_reference": {
              "allow_preprovision": true,
              "isCollection": false,
              "entity": "access_network_ip_pool"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "access": {
            "descr": "Information on how to access the storage instance",
            "containment": {
              "isCollection": false,
              "entity": "storage_instance_access"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "active_initiators": {
            "descr": "List of active initiators",
            "type": "array",
            "items": {
              "type": "string",
              "descr": "Identifier (IQN or EUI) of active initiator"
            }
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the storage instance is exported to",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "uuid": {
            "descr": "Storage target UUID",
            "type": "string"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "storage_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage instance"
          },
          "admin_state": {
            "descr": "Admin state of the storage instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "op_state": {
            "descr": "Operational state of the storage instance",
            "enum": [
              "available",
              "unavailable",
              "failed"
            ]
          },
          "volumes": {
            "descr": "Dictionary of volumes contained within this storage instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume"
            }
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "acl_policy": {
            "descr": "ACL policy applied to this storage instance",
            "containment": {
              "isCollection": false,
              "entity": "acl_policy"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
            "resolved_reference": {
              "allow_preprovision": true,
              "isCollection": false,
              "entity": "access_network_ip_pool"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "access": {
            "descr": "Information on how to access the storage instance",
            "containment": {
              "isCollection": false,
              "entity": "storage_instance_access"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "active_initiators": {
            "descr": "List of active initiators",
            "type": "array",
            "items": {
              "type": "string",
              "descr": "Identifier (IQN or EUI) of active initiator"
            }
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the storage instance is exported to",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "uuid": {
            "descr": "Storage target UUID",
            "type": "string"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "storage_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage instance"
          },
          "admin_state": {
            "descr": "Admin state of the storage instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "op_state": {
            "descr": "Operational state of the storage instance",
            "enum": [
              "available",
              "unavailable",
              "failed"
            ]
          },
          "volumes": {
            "descr": "Dictionary of volumes contained within this storage instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume"
            }
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "acl_policy": {
            "descr": "ACL policy applied to this storage instance",
            "containment": {
              "isCollection": false,
              "entity": "acl_policy"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
            "resolved_reference": {
              "allow_preprovision": true,
              "isCollection": false,
              "entity": "access_network_ip_pool"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "access": {
            "descr": "Information on how to access the storage instance",
            "containment": {
              "isCollection": false,
              "entity": "storage_instance_access"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "active_initiators": {
            "descr": "List of active initiators",
            "type": "array",
            "items": {
              "type": "string",
              "descr": "Identifier (IQN or EUI) of active initiator"
            }
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the storage instance is exported to",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "uuid": {
            "descr": "Storage target UUID",
            "type": "string"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "create": {
      "group": "app_storage_provisioning",
      "descr": "Create a new storage instance within an application instance",
      "minVersion": "1.0.0.0",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage instance"
          },
          "admin_state": {
            "descr": "Admin state of the storage instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "volumes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for the volume"
                },
                "replica_count": {
                  "descr": "Data replication factor for the volume",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 5,
                  "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
                },
                "size": {
                  "descr": "Provisioned storage capacity in GiB",
                  "type": "number",
                  "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
                  "minimum": 1,
                  "maximum": 32768
                },
                "snapshot_policies": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                        "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                        "descr": "Name or label for snapshot policy"
                      },
                      "retention_count": {
                        "type": "integer",
                        "descr": "Total number of snapshots to retain on this schedule",
                        "minimum": 1,
                        "maximum": 256
                      },
                      "start_time": {
                        "type": "string",
                        "descr": "Must be an ISO8601 formatted timestamp",
                        "format": "date-time"
                      },
                      "interval": {
                        "enum": [
                          "1min",
                          "2min",
                          "15min",
                          "1hour",
                          "1day",
                          "1week",
                          "1month",
                          "1year"
                        ],
                        "internal_enums": [
                          "1min",
                          "2min"
                        ],
                        "descr": "Interval of time between snapshots on this schedule",
                        "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                      }
                    },
                    "required": [
                      "name",
                      "interval",
                      "retention_count"
                    ],
                    "additionalProperties": false
                  },
                  "descr": "Array of snapshot policies applied to this volume",
                  "additionalProperties": false
                },
                "performance_policy": {
                  "type": "object",
                  "properties": {
                    "total_iops_max": {
                      "type": "integer",
                      "descr": "Maximum total IOPS (enforced independently of read and write limits)",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "total_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "read_iops_max": {
                      "type": "integer",
                      "descr": "Maximum read IOPS",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "write_iops_max": {
                      "type": "integer",
                      "descr": "Maximum write IOPS",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "read_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum read bandwidth (KiB per second)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "write_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum write bandwidth (KiB per second)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    }
                  },
                  "required": [],
                  "additionalProperties": false,
                  "descr": "Performance policy applied to this volume"
                },
                "placement_mode": {
                  "enum": [
                    "hybrid",
                    "single_flash",
                    "all_flash"
                  ],
                  "descr": "Placement mode of the volume"
                }
              },
              "required": [
                "name",
                "size"
              ],
              "additionalProperties": false
            },
            "descr": "Array of volumes contained within this storage instance",
            "additionalProperties": false
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "acl_policy": {
            "type": "object",
            "properties": {
              "initiators": {
                "descr": "Initiators associated with the acl policy",
                "fmthelp": "Must be an array of paths pointing to storage template entities",
                "simple_reference": {
                  "isCollection": true,
                  "entity": "initiator"
                },
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "path"
                  ]
                }
              },
              "initiator_groups": {
                "descr": "Initiator groups associated with the acl policy",
                "fmthelp": "Must be an array of paths pointing to storage template entities",
                "simple_reference": {
                  "isCollection": true,
                  "entity": "initiator_group"
                },
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "path"
                  ]
                }
              }
            },
            "required": [],
            "additionalProperties": false,
            "descr": "ACL policy applied to this storage instance"
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
            "resolved_reference": {
              "allow_preprovision": true,
              "isCollection": false,
              "entity": "access_network_ip_pool"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "access": {
            "type": "object",
            "properties": {},
            "required": [],
            "additionalProperties": false,
            "descr": "Information on how to access the storage instance"
          },
          "auth": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "descr": "The authentication type",
                "enum": [
                  "none",
                  "chap",
                  "mchap"
                ],
                "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
              },
              "initiator_user_name": {
                "type": "string",
                "descr": "The username credential of the initiator",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
              },
              "initiator_pswd": {
                "type": "string",
                "descr": "The password credential of the initiator",
                "minLength": 12,
                "maxLength": 16,
                "fmthelp": "Must be a valid string between 12 and 16 characters in length."
              },
              "target_user_name": {
                "type": "string",
                "descr": "The username credential of the target",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
              },
              "target_pswd": {
                "type": "string",
                "descr": "The password credential of the target",
                "minLength": 12,
                "maxLength": 16,
                "fmthelp": "Must be a valid string between 12 and 16 characters in length."
              }
            },
            "required": [
              "type"
            ],
            "additionalProperties": false,
            "descr": "iSCSI authentication settings"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "op": "create",
      "path": "/app_instances/:id/storage_instances"
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name": {
    "read": {
      "descr": "Show a single storage instance on an app instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "storage_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage instance"
          },
          "admin_state": {
            "descr": "Admin state of the storage instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "op_state": {
            "descr": "Operational state of the storage instance",
            "enum": [
              "available",
              "unavailable",
              "failed"
            ]
          },
          "volumes": {
            "descr": "Dictionary of volumes contained within this storage instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume"
            }
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "acl_policy": {
            "descr": "ACL policy applied to this storage instance",
            "containment": {
              "isCollection": false,
              "entity": "acl_policy"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
            "resolved_reference": {
              "allow_preprovision": true,
              "isCollection": false,
              "entity": "access_network_ip_pool"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "access": {
            "descr": "Information on how to access the storage instance",
            "containment": {
              "isCollection": false,
              "entity": "storage_instance_access"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "active_initiators": {
            "descr": "List of active initiators",
            "type": "array",
            "items": {
              "type": "string",
              "descr": "Identifier (IQN or EUI) of active initiator"
            }
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the storage instance is exported to",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "uuid": {
            "descr": "Storage target UUID",
            "type": "string"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "delete": {
      "descr": "Delete a storage instance on an app instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "force": {
            "type": "boolean",
            "pattern": {},
            "descr": "Force update and override any warnings"
          }
        }
      },
      "op": "delete",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "storage_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage instance"
          },
          "admin_state": {
            "descr": "Admin state of the storage instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "op_state": {
            "descr": "Operational state of the storage instance",
            "enum": [
              "available",
              "unavailable",
              "failed"
            ]
          },
          "volumes": {
            "descr": "Dictionary of volumes contained within this storage instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume"
            }
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "acl_policy": {
            "descr": "ACL policy applied to this storage instance",
            "containment": {
              "isCollection": false,
              "entity": "acl_policy"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
            "resolved_reference": {
              "allow_preprovision": true,
              "isCollection": false,
              "entity": "access_network_ip_pool"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "access": {
            "descr": "Information on how to access the storage instance",
            "containment": {
              "isCollection": false,
              "entity": "storage_instance_access"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "active_initiators": {
            "descr": "List of active initiators",
            "type": "array",
            "items": {
              "type": "string",
              "descr": "Identifier (IQN or EUI) of active initiator"
            }
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the storage instance is exported to",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "uuid": {
            "descr": "Storage target UUID",
            "type": "string"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "storage_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage instance"
          },
          "admin_state": {
            "descr": "Admin state of the storage instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "op_state": {
            "descr": "Operational state of the storage instance",
            "enum": [
              "available",
              "unavailable",
              "failed"
            ]
          },
          "volumes": {
            "descr": "Dictionary of volumes contained within this storage instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume"
            }
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "acl_policy": {
            "descr": "ACL policy applied to this storage instance",
            "containment": {
              "isCollection": false,
              "entity": "acl_policy"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
            "resolved_reference": {
              "allow_preprovision": true,
              "isCollection": false,
              "entity": "access_network_ip_pool"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "access": {
            "descr": "Information on how to access the storage instance",
            "containment": {
              "isCollection": false,
              "entity": "storage_instance_access"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "active_initiators": {
            "descr": "List of active initiators",
            "type": "array",
            "items": {
              "type": "string",
              "descr": "Identifier (IQN or EUI) of active initiator"
            }
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the storage instance is exported to",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "uuid": {
            "descr": "Storage target UUID",
            "type": "string"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "storage_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for storage instance"
          },
          "admin_state": {
            "descr": "Admin state of the storage instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "op_state": {
            "descr": "Operational state of the storage instance",
            "enum": [
              "available",
              "unavailable",
              "failed"
            ]
          },
          "volumes": {
            "descr": "Dictionary of volumes contained within this storage instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "volume"
            }
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "acl_policy": {
            "descr": "ACL policy applied to this storage instance",
            "containment": {
              "isCollection": false,
              "entity": "acl_policy"
            }
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
            "resolved_reference": {
              "allow_preprovision": true,
              "isCollection": false,
              "entity": "access_network_ip_pool"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "access": {
            "descr": "Information on how to access the storage instance",
            "containment": {
              "isCollection": false,
              "entity": "storage_instance_access"
            }
          },
          "auth": {
            "descr": "iSCSI authentication settings",
            "containment": {
              "isCollection": false,
              "entity": "auth"
            }
          },
          "active_initiators": {
            "descr": "List of active initiators",
            "type": "array",
            "items": {
              "type": "string",
              "descr": "Identifier (IQN or EUI) of active initiator"
            }
          },
          "active_storage_nodes": {
            "descr": "Storage nodes where the storage instance is exported to",
            "simple_reference": {
              "isCollection": true,
              "entity": "storage_node"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "uuid": {
            "descr": "Storage target UUID",
            "type": "string"
          },
          "deployment_state": {
            "descr": "State of the storage target associated with this instance",
            "enum": [
              "deployed",
              "not_deployed",
              "failed"
            ]
          }
        }
      }
    },
    "update": {
      "group": "app_storage_provisioning",
      "descr": "Update an existing storage instance",
      "minVersion": "1.0.0.0",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "admin_state": {
            "descr": "Admin state of the storage instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "auth": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "descr": "The authentication type",
                "enum": [
                  "none",
                  "chap",
                  "mchap"
                ],
                "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
              },
              "initiator_user_name": {
                "type": "string",
                "descr": "The username credential of the initiator",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
              },
              "initiator_pswd": {
                "type": "string",
                "descr": "The password credential of the initiator",
                "minLength": 12,
                "maxLength": 16,
                "fmthelp": "Must be a valid string between 12 and 16 characters in length."
              },
              "target_user_name": {
                "type": "string",
                "descr": "The username credential of the target",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
              },
              "target_pswd": {
                "type": "string",
                "descr": "The password credential of the target",
                "minLength": 12,
                "maxLength": 16,
                "fmthelp": "Must be a valid string between 12 and 16 characters in length."
              }
            },
            "required": [],
            "additionalProperties": false,
            "descr": "iSCSI authentication settings"
          },
          "acl_policy": {
            "type": "object",
            "properties": {
              "initiators": {
                "descr": "Initiators associated with the acl policy",
                "fmthelp": "Must be an array of paths pointing to storage template entities",
                "simple_reference": {
                  "isCollection": true,
                  "entity": "initiator"
                },
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "path"
                  ]
                }
              },
              "initiator_groups": {
                "descr": "Initiator groups associated with the acl policy",
                "fmthelp": "Must be an array of paths pointing to storage template entities",
                "simple_reference": {
                  "isCollection": true,
                  "entity": "initiator_group"
                },
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "path"
                  ]
                }
              }
            },
            "required": [],
            "additionalProperties": false,
            "descr": "ACL policy applied to this storage instance"
          },
          "volumes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for the volume"
                },
                "replica_count": {
                  "descr": "Data replication factor for the volume",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 5,
                  "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
                },
                "size": {
                  "descr": "Provisioned storage capacity in GiB",
                  "type": "number",
                  "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
                  "minimum": 1,
                  "maximum": 32768
                },
                "snapshot_policies": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                        "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                        "descr": "Name or label for snapshot policy"
                      },
                      "retention_count": {
                        "type": "integer",
                        "descr": "Total number of snapshots to retain on this schedule",
                        "minimum": 1,
                        "maximum": 256
                      },
                      "start_time": {
                        "type": "string",
                        "descr": "Must be an ISO8601 formatted timestamp",
                        "format": "date-time"
                      },
                      "interval": {
                        "enum": [
                          "1min",
                          "2min",
                          "15min",
                          "1hour",
                          "1day",
                          "1week",
                          "1month",
                          "1year"
                        ],
                        "internal_enums": [
                          "1min",
                          "2min"
                        ],
                        "descr": "Interval of time between snapshots on this schedule",
                        "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                      }
                    },
                    "required": [
                      "name",
                      "interval",
                      "retention_count"
                    ],
                    "additionalProperties": false
                  },
                  "descr": "Array of snapshot policies applied to this volume",
                  "additionalProperties": false
                },
                "performance_policy": {
                  "type": "object",
                  "properties": {
                    "total_iops_max": {
                      "type": "integer",
                      "descr": "Maximum total IOPS (enforced independently of read and write limits)",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "total_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "read_iops_max": {
                      "type": "integer",
                      "descr": "Maximum read IOPS",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "write_iops_max": {
                      "type": "integer",
                      "descr": "Maximum write IOPS",
                      "minimum": 0,
                      "maximum": 10000000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "read_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum read bandwidth (KiB per second)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    },
                    "write_bandwidth_max": {
                      "type": "integer",
                      "descr": "Maximum write bandwidth (KiB per second)",
                      "minimum": 0,
                      "maximum": 10240000,
                      "fmthelp": "Must be a positive integer"
                    }
                  },
                  "required": [],
                  "additionalProperties": false,
                  "descr": "Performance policy applied to this volume"
                },
                "placement_mode": {
                  "enum": [
                    "hybrid",
                    "single_flash",
                    "all_flash"
                  ],
                  "descr": "Placement mode of the volume"
                }
              },
              "required": [
                "name",
                "size"
              ],
              "additionalProperties": false
            },
            "descr": "Array of volumes contained within this storage instance",
            "additionalProperties": false
          },
          "force": {
            "type": "boolean",
            "pattern": {},
            "descr": "Force update and override any warnings"
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "ip_pool": {
            "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
            "resolved_reference": {
              "allow_preprovision": true,
              "isCollection": false,
              "entity": "access_network_ip_pool"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "op": "update",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name"
    }
  },
  "/app_instances/:id/storage_instances/:storage_instance_name/auth": {
    "read": {
      "descr": "Show the authentication settings on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/auth",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "auth",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "type": {
            "type": "string",
            "descr": "The authentication type",
            "enum": [
              "none",
              "chap",
              "mchap"
            ],
            "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
          },
          "initiator_user_name": {
            "type": "string",
            "descr": "The username credential of the initiator",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "initiator_pswd": {
            "type": "string",
            "descr": "The password credential of the initiator",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          },
          "target_user_name": {
            "type": "string",
            "descr": "The username credential of the target",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "target_pswd": {
            "type": "string",
            "descr": "The password credential of the target",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          }
        }
      }
    },
    "update": {
      "descr": "Update the authentication settings on a storage instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "descr": "The authentication type",
            "enum": [
              "none",
              "chap",
              "mchap"
            ],
            "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
          },
          "initiator_user_name": {
            "type": "string",
            "descr": "The username credential of the initiator",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "initiator_pswd": {
            "type": "string",
            "descr": "The password credential of the initiator",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          },
          "target_user_name": {
            "type": "string",
            "descr": "The username credential of the target",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "target_pswd": {
            "type": "string",
            "descr": "The password credential of the target",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          }
        }
      },
      "op": "update",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/auth",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "auth",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "type": {
            "type": "string",
            "descr": "The authentication type",
            "enum": [
              "none",
              "chap",
              "mchap"
            ],
            "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
          },
          "initiator_user_name": {
            "type": "string",
            "descr": "The username credential of the initiator",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "initiator_pswd": {
            "type": "string",
            "descr": "The password credential of the initiator",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          },
          "target_user_name": {
            "type": "string",
            "descr": "The username credential of the target",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "target_pswd": {
            "type": "string",
            "descr": "The password credential of the target",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/auth",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "auth",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "type": {
            "type": "string",
            "descr": "The authentication type",
            "enum": [
              "none",
              "chap",
              "mchap"
            ],
            "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
          },
          "initiator_user_name": {
            "type": "string",
            "descr": "The username credential of the initiator",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "initiator_pswd": {
            "type": "string",
            "descr": "The password credential of the initiator",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          },
          "target_user_name": {
            "type": "string",
            "descr": "The username credential of the target",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "target_pswd": {
            "type": "string",
            "descr": "The password credential of the target",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/storage_instances/:storage_instance_name/auth",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "storage_instance_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for storage instance"
        }
      },
      "entity": "auth",
      "minVersion": "1.0.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "type": {
            "type": "string",
            "descr": "The authentication type",
            "enum": [
              "none",
              "chap",
              "mchap"
            ],
            "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
          },
          "initiator_user_name": {
            "type": "string",
            "descr": "The username credential of the initiator",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "initiator_pswd": {
            "type": "string",
            "descr": "The password credential of the initiator",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          },
          "target_user_name": {
            "type": "string",
            "descr": "The username credential of the target",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
          },
          "target_pswd": {
            "type": "string",
            "descr": "The password credential of the target",
            "minLength": 12,
            "maxLength": 16,
            "fmthelp": "Must be a valid string between 12 and 16 characters in length."
          }
        }
      }
    }
  },
  "/app_instances": {
    "read": {
      "descr": "List all app instances",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_instances",
      "entity": "app_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app instance"
          },
          "id": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "App instance ID",
            "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "app_template": {
            "descr": "App template to which the instance is bound",
            "resolved_reference": {
              "allow_preprovision": false,
              "isCollection": false,
              "entity": "app_template"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app instance",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "admin_state": {
            "descr": "Admin state of the app instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "storage_instances": {
            "descr": "Dictionary of storage instances contained in this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_instance"
            }
          },
          "clone_src": {
            "descr": "Path to source app instance to clone from",
            "fmthelp": "Must be a valid path to an app instance",
            "simple_reference": {
              "isCollection": false,
              "entity": "app_instance"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "create_mode": {
            "type": "string",
            "descr": "Indicates a third-party driver which created the app_instance",
            "enum": [
              "normal",
              "openstack",
              "internal",
              "docker",
              "cloudstack",
              "kubernetes",
              "mesos",
              "vmware_vro",
              "vmware_vcenter",
              "docker_swarm"
            ]
          },
          "uuid": {
            "type": "string",
            "descr": "UUID for volume (currently only applicable to OpenStack)",
            "fmthelp": "Must be a valid UUID",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. Setting will apply to all storage instances within the app instance. After creation, this parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "snapshots": {
            "descr": "Snapshots taken of all volumes in the app instance as a consistency group",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          },
          "deployment_state": {
            "descr": "App instance deployment state",
            "enum": [
              "deployed",
              "failed",
              "degraded"
            ]
          },
          "op_state": {
            "descr": "Operational state of the app instance",
            "enum": [
              "cloning"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances",
      "entity": "app_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app instance"
          },
          "id": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "App instance ID",
            "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "app_template": {
            "descr": "App template to which the instance is bound",
            "resolved_reference": {
              "allow_preprovision": false,
              "isCollection": false,
              "entity": "app_template"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app instance",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "admin_state": {
            "descr": "Admin state of the app instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "storage_instances": {
            "descr": "Dictionary of storage instances contained in this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_instance"
            }
          },
          "clone_src": {
            "descr": "Path to source app instance to clone from",
            "fmthelp": "Must be a valid path to an app instance",
            "simple_reference": {
              "isCollection": false,
              "entity": "app_instance"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "create_mode": {
            "type": "string",
            "descr": "Indicates a third-party driver which created the app_instance",
            "enum": [
              "normal",
              "openstack",
              "internal",
              "docker",
              "cloudstack",
              "kubernetes",
              "mesos",
              "vmware_vro",
              "vmware_vcenter",
              "docker_swarm"
            ]
          },
          "uuid": {
            "type": "string",
            "descr": "UUID for volume (currently only applicable to OpenStack)",
            "fmthelp": "Must be a valid UUID",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. Setting will apply to all storage instances within the app instance. After creation, this parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "snapshots": {
            "descr": "Snapshots taken of all volumes in the app instance as a consistency group",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          },
          "deployment_state": {
            "descr": "App instance deployment state",
            "enum": [
              "deployed",
              "failed",
              "degraded"
            ]
          },
          "op_state": {
            "descr": "Operational state of the app instance",
            "enum": [
              "cloning"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances",
      "entity": "app_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app instance"
          },
          "id": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "App instance ID",
            "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "app_template": {
            "descr": "App template to which the instance is bound",
            "resolved_reference": {
              "allow_preprovision": false,
              "isCollection": false,
              "entity": "app_template"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app instance",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "admin_state": {
            "descr": "Admin state of the app instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "storage_instances": {
            "descr": "Dictionary of storage instances contained in this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_instance"
            }
          },
          "clone_src": {
            "descr": "Path to source app instance to clone from",
            "fmthelp": "Must be a valid path to an app instance",
            "simple_reference": {
              "isCollection": false,
              "entity": "app_instance"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "create_mode": {
            "type": "string",
            "descr": "Indicates a third-party driver which created the app_instance",
            "enum": [
              "normal",
              "openstack",
              "internal",
              "docker",
              "cloudstack",
              "kubernetes",
              "mesos",
              "vmware_vro",
              "vmware_vcenter",
              "docker_swarm"
            ]
          },
          "uuid": {
            "type": "string",
            "descr": "UUID for volume (currently only applicable to OpenStack)",
            "fmthelp": "Must be a valid UUID",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. Setting will apply to all storage instances within the app instance. After creation, this parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "snapshots": {
            "descr": "Snapshots taken of all volumes in the app instance as a consistency group",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          },
          "deployment_state": {
            "descr": "App instance deployment state",
            "enum": [
              "deployed",
              "failed",
              "degraded"
            ]
          },
          "op_state": {
            "descr": "Operational state of the app instance",
            "enum": [
              "cloning"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "create": {
      "group": "app_storage_provisioning",
      "descr": "Create an app instance",
      "minVersion": "1.1.3.0",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app instance"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app instance",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "clone_src": {
            "descr": "Path to source app instance to clone from",
            "fmthelp": "Must be a valid path to an app instance",
            "simple_reference": {
              "isCollection": false,
              "entity": "app_instance"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "clone_volume_src": {
            "descr": "Path to source volume to clone from",
            "fmthelp": "Must be a valid path to a volume",
            "simple_reference": {
              "isCollection": false,
              "entity": "volume"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "clone_snapshot_src": {
            "descr": "Path to source snapshot to clone from",
            "fmthelp": "Must be a valid path to a snapshot",
            "simple_reference": {
              "isCollection": false,
              "entity": "snapshot"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "app_template": {
            "descr": "App template to which the instance is bound",
            "resolved_reference": {
              "allow_preprovision": false,
              "isCollection": false,
              "entity": "app_template"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "create_mode": {
            "type": "string",
            "descr": "Indicates a third-party driver which created the app_instance",
            "enum": [
              "normal",
              "openstack",
              "internal",
              "docker",
              "cloudstack",
              "kubernetes",
              "mesos",
              "vmware_vro",
              "vmware_vcenter",
              "docker_swarm"
            ]
          },
          "uuid": {
            "type": "string",
            "descr": "UUID for volume (currently only applicable to OpenStack)",
            "fmthelp": "Must be a valid UUID",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. Setting will apply to all storage instances within the app instance. After creation, this parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "storage_instances": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for storage instance"
                },
                "admin_state": {
                  "descr": "Admin state of the storage instance",
                  "enum": [
                    "online",
                    "offline"
                  ],
                  "fmthelp": "Must be one of the enums online, offline"
                },
                "volumes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                        "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                        "descr": "Name or label for the volume"
                      },
                      "replica_count": {
                        "descr": "Data replication factor for the volume",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 5,
                        "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
                      },
                      "size": {
                        "descr": "Provisioned storage capacity in GiB",
                        "type": "number",
                        "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
                        "minimum": 1,
                        "maximum": 32768
                      },
                      "snapshot_policies": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                              "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                              "descr": "Name or label for snapshot policy"
                            },
                            "retention_count": {
                              "type": "integer",
                              "descr": "Total number of snapshots to retain on this schedule",
                              "minimum": 1,
                              "maximum": 256
                            },
                            "start_time": {
                              "type": "string",
                              "descr": "Must be an ISO8601 formatted timestamp",
                              "format": "date-time"
                            },
                            "interval": {
                              "enum": [
                                "1min",
                                "2min",
                                "15min",
                                "1hour",
                                "1day",
                                "1week",
                                "1month",
                                "1year"
                              ],
                              "internal_enums": [
                                "1min",
                                "2min"
                              ],
                              "descr": "Interval of time between snapshots on this schedule",
                              "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                            }
                          },
                          "required": [
                            "name",
                            "interval",
                            "retention_count"
                          ],
                          "additionalProperties": false
                        },
                        "descr": "Array of snapshot policies applied to this volume",
                        "additionalProperties": false
                      },
                      "performance_policy": {
                        "type": "object",
                        "properties": {
                          "total_iops_max": {
                            "type": "integer",
                            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "total_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "read_iops_max": {
                            "type": "integer",
                            "descr": "Maximum read IOPS",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "write_iops_max": {
                            "type": "integer",
                            "descr": "Maximum write IOPS",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "read_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum read bandwidth (KiB per second)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "write_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum write bandwidth (KiB per second)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          }
                        },
                        "required": [],
                        "additionalProperties": false,
                        "descr": "Performance policy applied to this volume"
                      },
                      "placement_mode": {
                        "enum": [
                          "hybrid",
                          "single_flash",
                          "all_flash"
                        ],
                        "descr": "Placement mode of the volume"
                      }
                    },
                    "required": [
                      "name",
                      "size"
                    ],
                    "additionalProperties": false
                  },
                  "descr": "Array of volumes contained within this storage instance",
                  "additionalProperties": false
                },
                "access_control_mode": {
                  "enum": [
                    "allow_all",
                    "deny_all"
                  ],
                  "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
                },
                "acl_policy": {
                  "type": "object",
                  "properties": {
                    "initiators": {
                      "descr": "Initiators associated with the acl policy",
                      "fmthelp": "Must be an array of paths pointing to storage template entities",
                      "simple_reference": {
                        "isCollection": true,
                        "entity": "initiator"
                      },
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string",
                            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "path"
                        ]
                      }
                    },
                    "initiator_groups": {
                      "descr": "Initiator groups associated with the acl policy",
                      "fmthelp": "Must be an array of paths pointing to storage template entities",
                      "simple_reference": {
                        "isCollection": true,
                        "entity": "initiator_group"
                      },
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string",
                            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [],
                  "additionalProperties": false,
                  "descr": "ACL policy applied to this storage instance"
                },
                "ip_pool": {
                  "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
                  "resolved_reference": {
                    "allow_preprovision": true,
                    "isCollection": false,
                    "entity": "access_network_ip_pool"
                  },
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "path"
                  ]
                },
                "access": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": false,
                  "descr": "Information on how to access the storage instance"
                },
                "auth": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "descr": "The authentication type",
                      "enum": [
                        "none",
                        "chap",
                        "mchap"
                      ],
                      "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
                    },
                    "initiator_user_name": {
                      "type": "string",
                      "descr": "The username credential of the initiator",
                      "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                      "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
                    },
                    "initiator_pswd": {
                      "type": "string",
                      "descr": "The password credential of the initiator",
                      "minLength": 12,
                      "maxLength": 16,
                      "fmthelp": "Must be a valid string between 12 and 16 characters in length."
                    },
                    "target_user_name": {
                      "type": "string",
                      "descr": "The username credential of the target",
                      "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                      "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
                    },
                    "target_pswd": {
                      "type": "string",
                      "descr": "The password credential of the target",
                      "minLength": 12,
                      "maxLength": 16,
                      "fmthelp": "Must be a valid string between 12 and 16 characters in length."
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "additionalProperties": false,
                  "descr": "iSCSI authentication settings"
                }
              },
              "required": [
                "name"
              ],
              "additionalProperties": false
            },
            "descr": "Array of storage instances contained in this app instance",
            "additionalProperties": false
          },
          "snapshot_policies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for snapshot policy"
                },
                "retention_count": {
                  "type": "integer",
                  "descr": "Total number of snapshots to retain on this schedule",
                  "minimum": 1,
                  "maximum": 256
                },
                "start_time": {
                  "type": "string",
                  "descr": "Must be an ISO8601 formatted timestamp",
                  "format": "date-time"
                },
                "interval": {
                  "enum": [
                    "1min",
                    "2min",
                    "15min",
                    "1hour",
                    "1day",
                    "1week",
                    "1month",
                    "1year"
                  ],
                  "internal_enums": [
                    "1min",
                    "2min"
                  ],
                  "descr": "Interval of time between snapshots on this schedule",
                  "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                }
              },
              "required": [
                "name",
                "interval",
                "retention_count"
              ],
              "additionalProperties": false
            },
            "descr": "Array of snapshot policies applied to this app instance",
            "additionalProperties": false
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "op": "create",
      "path": "/app_instances"
    }
  },
  "/app_instances/:id": {
    "read": {
      "descr": "Show a single app instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_instances/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "app_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app instance"
          },
          "id": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "App instance ID",
            "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "app_template": {
            "descr": "App template to which the instance is bound",
            "resolved_reference": {
              "allow_preprovision": false,
              "isCollection": false,
              "entity": "app_template"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app instance",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "admin_state": {
            "descr": "Admin state of the app instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "storage_instances": {
            "descr": "Dictionary of storage instances contained in this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_instance"
            }
          },
          "clone_src": {
            "descr": "Path to source app instance to clone from",
            "fmthelp": "Must be a valid path to an app instance",
            "simple_reference": {
              "isCollection": false,
              "entity": "app_instance"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "create_mode": {
            "type": "string",
            "descr": "Indicates a third-party driver which created the app_instance",
            "enum": [
              "normal",
              "openstack",
              "internal",
              "docker",
              "cloudstack",
              "kubernetes",
              "mesos",
              "vmware_vro",
              "vmware_vcenter",
              "docker_swarm"
            ]
          },
          "uuid": {
            "type": "string",
            "descr": "UUID for volume (currently only applicable to OpenStack)",
            "fmthelp": "Must be a valid UUID",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. Setting will apply to all storage instances within the app instance. After creation, this parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "snapshots": {
            "descr": "Snapshots taken of all volumes in the app instance as a consistency group",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          },
          "deployment_state": {
            "descr": "App instance deployment state",
            "enum": [
              "deployed",
              "failed",
              "degraded"
            ]
          },
          "op_state": {
            "descr": "Operational state of the app instance",
            "enum": [
              "cloning"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "delete": {
      "descr": "Delete an app instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "force": {
            "type": "boolean",
            "pattern": {},
            "descr": "Force update and override any warnings"
          }
        }
      },
      "op": "delete",
      "path": "/app_instances/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "app_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app instance"
          },
          "id": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "App instance ID",
            "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "app_template": {
            "descr": "App template to which the instance is bound",
            "resolved_reference": {
              "allow_preprovision": false,
              "isCollection": false,
              "entity": "app_template"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app instance",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "admin_state": {
            "descr": "Admin state of the app instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "storage_instances": {
            "descr": "Dictionary of storage instances contained in this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_instance"
            }
          },
          "clone_src": {
            "descr": "Path to source app instance to clone from",
            "fmthelp": "Must be a valid path to an app instance",
            "simple_reference": {
              "isCollection": false,
              "entity": "app_instance"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "create_mode": {
            "type": "string",
            "descr": "Indicates a third-party driver which created the app_instance",
            "enum": [
              "normal",
              "openstack",
              "internal",
              "docker",
              "cloudstack",
              "kubernetes",
              "mesos",
              "vmware_vro",
              "vmware_vcenter",
              "docker_swarm"
            ]
          },
          "uuid": {
            "type": "string",
            "descr": "UUID for volume (currently only applicable to OpenStack)",
            "fmthelp": "Must be a valid UUID",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. Setting will apply to all storage instances within the app instance. After creation, this parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "snapshots": {
            "descr": "Snapshots taken of all volumes in the app instance as a consistency group",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          },
          "deployment_state": {
            "descr": "App instance deployment state",
            "enum": [
              "deployed",
              "failed",
              "degraded"
            ]
          },
          "op_state": {
            "descr": "Operational state of the app instance",
            "enum": [
              "cloning"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "app_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app instance"
          },
          "id": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "App instance ID",
            "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "app_template": {
            "descr": "App template to which the instance is bound",
            "resolved_reference": {
              "allow_preprovision": false,
              "isCollection": false,
              "entity": "app_template"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app instance",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "admin_state": {
            "descr": "Admin state of the app instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "storage_instances": {
            "descr": "Dictionary of storage instances contained in this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_instance"
            }
          },
          "clone_src": {
            "descr": "Path to source app instance to clone from",
            "fmthelp": "Must be a valid path to an app instance",
            "simple_reference": {
              "isCollection": false,
              "entity": "app_instance"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "create_mode": {
            "type": "string",
            "descr": "Indicates a third-party driver which created the app_instance",
            "enum": [
              "normal",
              "openstack",
              "internal",
              "docker",
              "cloudstack",
              "kubernetes",
              "mesos",
              "vmware_vro",
              "vmware_vcenter",
              "docker_swarm"
            ]
          },
          "uuid": {
            "type": "string",
            "descr": "UUID for volume (currently only applicable to OpenStack)",
            "fmthelp": "Must be a valid UUID",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. Setting will apply to all storage instances within the app instance. After creation, this parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "snapshots": {
            "descr": "Snapshots taken of all volumes in the app instance as a consistency group",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          },
          "deployment_state": {
            "descr": "App instance deployment state",
            "enum": [
              "deployed",
              "failed",
              "degraded"
            ]
          },
          "op_state": {
            "descr": "Operational state of the app instance",
            "enum": [
              "cloning"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "app_instance",
      "minVersion": "1.0.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app instance"
          },
          "id": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "App instance ID",
            "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "The health of the entity (ok, warning, critical)"
          },
          "app_template": {
            "descr": "App template to which the instance is bound",
            "resolved_reference": {
              "allow_preprovision": false,
              "isCollection": false,
              "entity": "app_template"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app instance",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "admin_state": {
            "descr": "Admin state of the app instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "storage_instances": {
            "descr": "Dictionary of storage instances contained in this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_instance"
            }
          },
          "clone_src": {
            "descr": "Path to source app instance to clone from",
            "fmthelp": "Must be a valid path to an app instance",
            "simple_reference": {
              "isCollection": false,
              "entity": "app_instance"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "create_mode": {
            "type": "string",
            "descr": "Indicates a third-party driver which created the app_instance",
            "enum": [
              "normal",
              "openstack",
              "internal",
              "docker",
              "cloudstack",
              "kubernetes",
              "mesos",
              "vmware_vro",
              "vmware_vcenter",
              "docker_swarm"
            ]
          },
          "uuid": {
            "type": "string",
            "descr": "UUID for volume (currently only applicable to OpenStack)",
            "fmthelp": "Must be a valid UUID",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          },
          "access_control_mode": {
            "enum": [
              "allow_all",
              "deny_all"
            ],
            "descr": "Allow all initiators by default, or deny all initiators by default. Setting will apply to all storage instances within the app instance. After creation, this parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
          },
          "snapshots": {
            "descr": "Snapshots taken of all volumes in the app instance as a consistency group",
            "fmthelp": "Elements must be valid paths to a snapshot",
            "containment": {
              "isCollection": true,
              "entity": "snapshot",
              "key": "uuid"
            }
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app instance",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          },
          "deployment_state": {
            "descr": "App instance deployment state",
            "enum": [
              "deployed",
              "failed",
              "degraded"
            ]
          },
          "op_state": {
            "descr": "Operational state of the app instance",
            "enum": [
              "cloning"
            ]
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "update": {
      "group": "app_storage_provisioning",
      "descr": "Update an app instance",
      "minVersion": "1.1.3.0",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app instance"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app instance",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "admin_state": {
            "descr": "Admin state of the app instance",
            "enum": [
              "online",
              "offline"
            ],
            "fmthelp": "Must be one of the enums online, offline"
          },
          "provisioned": {
            "descr": "Flag to indicate whether the instance has been provisioned or not",
            "type": "boolean"
          },
          "force": {
            "type": "boolean",
            "pattern": {},
            "descr": "Force update and override any warnings"
          },
          "restore_point": {
            "type": "string",
            "descr": "ID of snapshot to restore from",
            "fmthelp": "Must be a valid snapshot ID, which takes the format {sec}.{nsec}"
          },
          "storage_instances": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for storage instance"
                },
                "admin_state": {
                  "descr": "Admin state of the storage instance",
                  "enum": [
                    "online",
                    "offline"
                  ],
                  "fmthelp": "Must be one of the enums online, offline"
                },
                "volumes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                        "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                        "descr": "Name or label for the volume"
                      },
                      "replica_count": {
                        "descr": "Data replication factor for the volume",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 5,
                        "fmthelp": "Must be a valid integer, minimum 1 and maximum 5"
                      },
                      "size": {
                        "descr": "Provisioned storage capacity in GiB",
                        "type": "number",
                        "fmthelp": "Must be a valid positive number between 1 and 32,768 GiB (32 TiB)",
                        "minimum": 1,
                        "maximum": 32768
                      },
                      "snapshot_policies": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                              "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                              "descr": "Name or label for snapshot policy"
                            },
                            "retention_count": {
                              "type": "integer",
                              "descr": "Total number of snapshots to retain on this schedule",
                              "minimum": 1,
                              "maximum": 256
                            },
                            "start_time": {
                              "type": "string",
                              "descr": "Must be an ISO8601 formatted timestamp",
                              "format": "date-time"
                            },
                            "interval": {
                              "enum": [
                                "1min",
                                "2min",
                                "15min",
                                "1hour",
                                "1day",
                                "1week",
                                "1month",
                                "1year"
                              ],
                              "internal_enums": [
                                "1min",
                                "2min"
                              ],
                              "descr": "Interval of time between snapshots on this schedule",
                              "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                            }
                          },
                          "required": [
                            "name",
                            "interval",
                            "retention_count"
                          ],
                          "additionalProperties": false
                        },
                        "descr": "Array of snapshot policies applied to this volume",
                        "additionalProperties": false
                      },
                      "performance_policy": {
                        "type": "object",
                        "properties": {
                          "total_iops_max": {
                            "type": "integer",
                            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "total_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "read_iops_max": {
                            "type": "integer",
                            "descr": "Maximum read IOPS",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "write_iops_max": {
                            "type": "integer",
                            "descr": "Maximum write IOPS",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "read_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum read bandwidth (KiB per second)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "write_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum write bandwidth (KiB per second)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          }
                        },
                        "required": [],
                        "additionalProperties": false,
                        "descr": "Performance policy applied to this volume"
                      },
                      "placement_mode": {
                        "enum": [
                          "hybrid",
                          "single_flash",
                          "all_flash"
                        ],
                        "descr": "Placement mode of the volume"
                      }
                    },
                    "required": [
                      "name",
                      "size"
                    ],
                    "additionalProperties": false
                  },
                  "descr": "Array of volumes contained within this storage instance",
                  "additionalProperties": false
                },
                "access_control_mode": {
                  "enum": [
                    "allow_all",
                    "deny_all"
                  ],
                  "descr": "Allow all initiators by default, or deny all initiators by default. This parameter can only be changed from allow_all to deny_all; the reverse is not allowed."
                },
                "acl_policy": {
                  "type": "object",
                  "properties": {
                    "initiators": {
                      "descr": "Initiators associated with the acl policy",
                      "fmthelp": "Must be an array of paths pointing to storage template entities",
                      "simple_reference": {
                        "isCollection": true,
                        "entity": "initiator"
                      },
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string",
                            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "path"
                        ]
                      }
                    },
                    "initiator_groups": {
                      "descr": "Initiator groups associated with the acl policy",
                      "fmthelp": "Must be an array of paths pointing to storage template entities",
                      "simple_reference": {
                        "isCollection": true,
                        "entity": "initiator_group"
                      },
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string",
                            "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [],
                  "additionalProperties": false,
                  "descr": "ACL policy applied to this storage instance"
                },
                "ip_pool": {
                  "descr": "The path to the access network IP pool from which this instance draws its IP address(es)",
                  "resolved_reference": {
                    "allow_preprovision": true,
                    "isCollection": false,
                    "entity": "access_network_ip_pool"
                  },
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "path"
                  ]
                },
                "access": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": false,
                  "descr": "Information on how to access the storage instance"
                },
                "auth": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "descr": "The authentication type",
                      "enum": [
                        "none",
                        "chap",
                        "mchap"
                      ],
                      "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
                    },
                    "initiator_user_name": {
                      "type": "string",
                      "descr": "The username credential of the initiator",
                      "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                      "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
                    },
                    "initiator_pswd": {
                      "type": "string",
                      "descr": "The password credential of the initiator",
                      "minLength": 12,
                      "maxLength": 16,
                      "fmthelp": "Must be a valid string between 12 and 16 characters in length."
                    },
                    "target_user_name": {
                      "type": "string",
                      "descr": "The username credential of the target",
                      "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                      "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
                    },
                    "target_pswd": {
                      "type": "string",
                      "descr": "The password credential of the target",
                      "minLength": 12,
                      "maxLength": 16,
                      "fmthelp": "Must be a valid string between 12 and 16 characters in length."
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "additionalProperties": false,
                  "descr": "iSCSI authentication settings"
                }
              },
              "required": [
                "name"
              ],
              "additionalProperties": false
            },
            "descr": "Array of storage instances contained in this app instance",
            "additionalProperties": false
          },
          "snapshot_policies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for snapshot policy"
                },
                "retention_count": {
                  "type": "integer",
                  "descr": "Total number of snapshots to retain on this schedule",
                  "minimum": 1,
                  "maximum": 256
                },
                "start_time": {
                  "type": "string",
                  "descr": "Must be an ISO8601 formatted timestamp",
                  "format": "date-time"
                },
                "interval": {
                  "enum": [
                    "1min",
                    "2min",
                    "15min",
                    "1hour",
                    "1day",
                    "1week",
                    "1month",
                    "1year"
                  ],
                  "internal_enums": [
                    "1min",
                    "2min"
                  ],
                  "descr": "Interval of time between snapshots on this schedule",
                  "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                }
              },
              "required": [
                "name",
                "interval",
                "retention_count"
              ],
              "additionalProperties": false
            },
            "descr": "Array of snapshot policies applied to this app instance",
            "additionalProperties": false
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "op": "update",
      "path": "/app_instances/:id"
    }
  },
  "/app_instances/:id/snapshot_policies": {
    "create": {
      "descr": "Create a snapshot policy on an app instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        },
        "required": [
          "name",
          "interval",
          "retention_count"
        ]
      },
      "op": "create",
      "path": "/app_instances/:id/snapshot_policies",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "read": {
      "descr": "List all snapshot policies on an app instance",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_instances/:id/snapshot_policies",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/snapshot_policies",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/snapshot_policies",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_provisioning",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    }
  },
  "/app_instances/:id/snapshot_policies/:snapshot_policy_name": {
    "read": {
      "descr": "Show a single snapshot policy on an app instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_instances/:id/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "update": {
      "descr": "Update a snapshot policy on an app instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      },
      "op": "update",
      "path": "/app_instances/:id/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "delete": {
      "descr": "Delete a snapshot policy on an app instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_instances/:id/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    }
  },
  "/app_instances/:id/snapshots": {
    "create": {
      "descr": "Take a snapshot of all volumes in the app instance immediately",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          }
        },
        "required": []
      },
      "op": "create",
      "path": "/app_instances/:id/snapshots",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "snapshot",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "read": {
      "descr": "List all the snapshots taken of all volumes in the app instance",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_instances/:id/snapshots",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "snapshot",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/snapshots",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "snapshot",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/snapshots",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        }
      },
      "entity": "snapshot",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    }
  },
  "/app_instances/:id/snapshots/:timestamp": {
    "read": {
      "descr": "Show a single snapshot of all volumes in the app instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_instances/:id/snapshots/:timestamp",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "timestamp": {
          "type": "string",
          "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "delete": {
      "descr": "Delete a snapshot of all volumes in the app instance",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_instances/:id/snapshots/:timestamp",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "timestamp": {
          "type": "string",
          "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_instances/:id/snapshots/:timestamp",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "timestamp": {
          "type": "string",
          "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_instances/:id/snapshots/:timestamp",
      "urlParamSchema": {
        "id": {
          "type": "string",
          "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
          "descr": "App instance ID",
          "fmthelp": "Must be a valid UUID. For backward compatibility, this can also be app instance's name."
        },
        "timestamp": {
          "type": "string",
          "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
        }
      },
      "entity": "snapshot",
      "minVersion": "1.1.0.0",
      "group": "app_storage_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "timestamp": {
            "type": "string",
            "descr": "ISO 8601 formatted timestamp of snapshot creation in local time"
          },
          "uuid": {
            "type": "string",
            "descr": "UUID of snapshot",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "fmthelp": "Must be a valid UUID"
          },
          "op_state": {
            "type": "string",
            "descr": "Status of the snapshot",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "utc_ts": {
            "type": "integer",
            "descr": "UTC Unix timestamp (ms) of snapshot creation, used as collection key"
          }
        }
      }
    }
  },
  "/app_templates": {
    "read": {
      "descr": "List all app templates",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_templates",
      "entity": "app_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app template"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app template",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "storage_templates": {
            "descr": "Dictionary of storage templates associated with the user",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_template"
            }
          },
          "app_instances": {
            "descr": "App instances that are instantiated from the given template",
            "simple_reference": {
              "isCollection": true,
              "entity": "app_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates",
      "entity": "app_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app template"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app template",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "storage_templates": {
            "descr": "Dictionary of storage templates associated with the user",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_template"
            }
          },
          "app_instances": {
            "descr": "App instances that are instantiated from the given template",
            "simple_reference": {
              "isCollection": true,
              "entity": "app_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates",
      "entity": "app_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app template"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app template",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "storage_templates": {
            "descr": "Dictionary of storage templates associated with the user",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_template"
            }
          },
          "app_instances": {
            "descr": "App instances that are instantiated from the given template",
            "simple_reference": {
              "isCollection": true,
              "entity": "app_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          }
        }
      }
    },
    "create": {
      "group": "app_storage_design",
      "descr": "Create an application template",
      "minVersion": "1.1.0.0",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app template"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app template",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "snapshot_policies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for snapshot policy"
                },
                "retention_count": {
                  "type": "integer",
                  "descr": "Total number of snapshots to retain on this schedule",
                  "minimum": 1,
                  "maximum": 256
                },
                "start_time": {
                  "type": "string",
                  "descr": "Must be an ISO8601 formatted timestamp",
                  "format": "date-time"
                },
                "interval": {
                  "enum": [
                    "1min",
                    "2min",
                    "15min",
                    "1hour",
                    "1day",
                    "1week",
                    "1month",
                    "1year"
                  ],
                  "internal_enums": [
                    "1min",
                    "2min"
                  ],
                  "descr": "Interval of time between snapshots on this schedule",
                  "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                }
              },
              "required": [
                "name",
                "interval",
                "retention_count"
              ],
              "additionalProperties": false
            },
            "descr": "Array of snapshot policies applied to this app template",
            "additionalProperties": false
          },
          "storage_templates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for storage template"
                },
                "volume_templates": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                        "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                        "descr": "Name or label for volume template"
                      },
                      "replica_count": {
                        "type": "integer",
                        "descr": "Data replication factor for the volume",
                        "minimum": 1,
                        "maximum": 5,
                        "fmthelp": "Must be an integer between 1 and 5"
                      },
                      "size": {
                        "type": "integer",
                        "descr": "Volume size in GiB",
                        "minimum": 1,
                        "maximum": 262144,
                        "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
                      },
                      "performance_policy": {
                        "type": "object",
                        "properties": {
                          "total_iops_max": {
                            "type": "integer",
                            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "total_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "read_iops_max": {
                            "type": "integer",
                            "descr": "Maximum read IOPS",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "write_iops_max": {
                            "type": "integer",
                            "descr": "Maximum write IOPS",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "read_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum read bandwidth (KiB per second)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "write_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum write bandwidth (KiB per second)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          }
                        },
                        "required": [],
                        "additionalProperties": false,
                        "descr": "Performance policy applied to this volume template"
                      },
                      "snapshot_policies": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                              "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                              "descr": "Name or label for snapshot policy"
                            },
                            "retention_count": {
                              "type": "integer",
                              "descr": "Total number of snapshots to retain on this schedule",
                              "minimum": 1,
                              "maximum": 256
                            },
                            "start_time": {
                              "type": "string",
                              "descr": "Must be an ISO8601 formatted timestamp",
                              "format": "date-time"
                            },
                            "interval": {
                              "enum": [
                                "1min",
                                "2min",
                                "15min",
                                "1hour",
                                "1day",
                                "1week",
                                "1month",
                                "1year"
                              ],
                              "internal_enums": [
                                "1min",
                                "2min"
                              ],
                              "descr": "Interval of time between snapshots on this schedule",
                              "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                            }
                          },
                          "required": [
                            "name",
                            "interval",
                            "retention_count"
                          ],
                          "additionalProperties": false
                        },
                        "descr": "Snapshot policies applied to this volume template",
                        "additionalProperties": false
                      },
                      "placement_mode": {
                        "enum": [
                          "hybrid",
                          "single_flash",
                          "all_flash"
                        ],
                        "descr": "Placement mode of the volume"
                      }
                    },
                    "required": [
                      "name",
                      "size"
                    ],
                    "additionalProperties": false
                  },
                  "descr": "Array of volume templates contained within this storage template",
                  "additionalProperties": false
                },
                "auth": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "descr": "The authentication type",
                      "enum": [
                        "none",
                        "chap",
                        "mchap"
                      ],
                      "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
                    },
                    "initiator_user_name": {
                      "type": "string",
                      "descr": "The username credential of the initiator",
                      "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                      "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
                    },
                    "initiator_pswd": {
                      "type": "string",
                      "descr": "The password credential of the initiator",
                      "minLength": 12,
                      "maxLength": 16,
                      "fmthelp": "Must be a valid string between 12 and 16 characters in length."
                    },
                    "target_user_name": {
                      "type": "string",
                      "descr": "The username credential of the target",
                      "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                      "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
                    },
                    "target_pswd": {
                      "type": "string",
                      "descr": "The password credential of the target",
                      "minLength": 12,
                      "maxLength": 16,
                      "fmthelp": "Must be a valid string between 12 and 16 characters in length."
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "additionalProperties": false,
                  "descr": "iSCSI authentication settings"
                },
                "ip_pool": {
                  "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "additionalProperties": false
            },
            "descr": "Array of storage templates associated with the user",
            "additionalProperties": false
          },
          "copy_from": {
            "descr": "App template from which to copy",
            "simple_reference": {
              "isCollection": false,
              "entity": "app_template"
            },
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "op": "create",
      "path": "/app_templates"
    }
  },
  "/app_templates/:name": {
    "read": {
      "descr": "Show a single app template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_templates/:name",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "app_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app template"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app template",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "storage_templates": {
            "descr": "Dictionary of storage templates associated with the user",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_template"
            }
          },
          "app_instances": {
            "descr": "App instances that are instantiated from the given template",
            "simple_reference": {
              "isCollection": true,
              "entity": "app_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          }
        }
      }
    },
    "delete": {
      "descr": "Delete an app template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_templates/:name",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "app_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app template"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app template",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "storage_templates": {
            "descr": "Dictionary of storage templates associated with the user",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_template"
            }
          },
          "app_instances": {
            "descr": "App instances that are instantiated from the given template",
            "simple_reference": {
              "isCollection": true,
              "entity": "app_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:name",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "app_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app template"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app template",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "storage_templates": {
            "descr": "Dictionary of storage templates associated with the user",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_template"
            }
          },
          "app_instances": {
            "descr": "App instances that are instantiated from the given template",
            "simple_reference": {
              "isCollection": true,
              "entity": "app_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:name",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "app_template",
      "minVersion": "1.0.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for app template"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app template",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "storage_templates": {
            "descr": "Dictionary of storage templates associated with the user",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "storage_template"
            }
          },
          "app_instances": {
            "descr": "App instances that are instantiated from the given template",
            "simple_reference": {
              "isCollection": true,
              "entity": "app_instance"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          },
          "snapshot_policies": {
            "descr": "Dictionary of snapshot policies applied to this app template",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "snapshot_policy"
            }
          }
        }
      }
    },
    "update": {
      "group": "app_storage_design",
      "descr": "Update an app template",
      "minVersion": "1.1.0.0",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "descr": "Description of the app template",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "storage_templates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for storage template"
                },
                "volume_templates": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                        "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                        "descr": "Name or label for volume template"
                      },
                      "replica_count": {
                        "type": "integer",
                        "descr": "Data replication factor for the volume",
                        "minimum": 1,
                        "maximum": 5,
                        "fmthelp": "Must be an integer between 1 and 5"
                      },
                      "size": {
                        "type": "integer",
                        "descr": "Volume size in GiB",
                        "minimum": 1,
                        "maximum": 262144,
                        "fmthelp": "Must be a valid positive integer between 1 and 262,144 GiB (256 TiB)"
                      },
                      "performance_policy": {
                        "type": "object",
                        "properties": {
                          "total_iops_max": {
                            "type": "integer",
                            "descr": "Maximum total IOPS (enforced independently of read and write limits)",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "total_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum total bandwidth (KiB per second) (enforced independently of read and write limits)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "read_iops_max": {
                            "type": "integer",
                            "descr": "Maximum read IOPS",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "write_iops_max": {
                            "type": "integer",
                            "descr": "Maximum write IOPS",
                            "minimum": 0,
                            "maximum": 10000000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "read_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum read bandwidth (KiB per second)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          },
                          "write_bandwidth_max": {
                            "type": "integer",
                            "descr": "Maximum write bandwidth (KiB per second)",
                            "minimum": 0,
                            "maximum": 10240000,
                            "fmthelp": "Must be a positive integer"
                          }
                        },
                        "required": [],
                        "additionalProperties": false,
                        "descr": "Performance policy applied to this volume template"
                      },
                      "snapshot_policies": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                              "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                              "descr": "Name or label for snapshot policy"
                            },
                            "retention_count": {
                              "type": "integer",
                              "descr": "Total number of snapshots to retain on this schedule",
                              "minimum": 1,
                              "maximum": 256
                            },
                            "start_time": {
                              "type": "string",
                              "descr": "Must be an ISO8601 formatted timestamp",
                              "format": "date-time"
                            },
                            "interval": {
                              "enum": [
                                "1min",
                                "2min",
                                "15min",
                                "1hour",
                                "1day",
                                "1week",
                                "1month",
                                "1year"
                              ],
                              "internal_enums": [
                                "1min",
                                "2min"
                              ],
                              "descr": "Interval of time between snapshots on this schedule",
                              "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                            }
                          },
                          "required": [
                            "name",
                            "interval",
                            "retention_count"
                          ],
                          "additionalProperties": false
                        },
                        "descr": "Snapshot policies applied to this volume template",
                        "additionalProperties": false
                      },
                      "placement_mode": {
                        "enum": [
                          "hybrid",
                          "single_flash",
                          "all_flash"
                        ],
                        "descr": "Placement mode of the volume"
                      }
                    },
                    "required": [
                      "name",
                      "size"
                    ],
                    "additionalProperties": false
                  },
                  "descr": "Array of volume templates contained within this storage template",
                  "additionalProperties": false
                },
                "auth": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "descr": "The authentication type",
                      "enum": [
                        "none",
                        "chap",
                        "mchap"
                      ],
                      "fmthelp": "Must be one of 'none', 'chap', 'mchap'."
                    },
                    "initiator_user_name": {
                      "type": "string",
                      "descr": "The username credential of the initiator",
                      "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                      "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
                    },
                    "initiator_pswd": {
                      "type": "string",
                      "descr": "The password credential of the initiator",
                      "minLength": 12,
                      "maxLength": 16,
                      "fmthelp": "Must be a valid string between 12 and 16 characters in length."
                    },
                    "target_user_name": {
                      "type": "string",
                      "descr": "The username credential of the target",
                      "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                      "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore"
                    },
                    "target_pswd": {
                      "type": "string",
                      "descr": "The password credential of the target",
                      "minLength": 12,
                      "maxLength": 16,
                      "fmthelp": "Must be a valid string between 12 and 16 characters in length."
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "additionalProperties": false,
                  "descr": "iSCSI authentication settings"
                },
                "ip_pool": {
                  "descr": "The path to the access network IP pool from which provisioned instances will draw IP address(es)",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "additionalProperties": false
            },
            "descr": "Array of storage templates associated with the user",
            "additionalProperties": false
          },
          "snapshot_policies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
                  "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
                  "descr": "Name or label for snapshot policy"
                },
                "retention_count": {
                  "type": "integer",
                  "descr": "Total number of snapshots to retain on this schedule",
                  "minimum": 1,
                  "maximum": 256
                },
                "start_time": {
                  "type": "string",
                  "descr": "Must be an ISO8601 formatted timestamp",
                  "format": "date-time"
                },
                "interval": {
                  "enum": [
                    "1min",
                    "2min",
                    "15min",
                    "1hour",
                    "1day",
                    "1week",
                    "1month",
                    "1year"
                  ],
                  "internal_enums": [
                    "1min",
                    "2min"
                  ],
                  "descr": "Interval of time between snapshots on this schedule",
                  "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
                }
              },
              "required": [
                "name",
                "interval",
                "retention_count"
              ],
              "additionalProperties": false
            },
            "descr": "Array of snapshot policies applied to this app template",
            "additionalProperties": false
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "op": "update",
      "path": "/app_templates/:name"
    }
  },
  "/app_templates/:name/snapshot_policies": {
    "create": {
      "descr": "Create a snapshot policy on an app template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        },
        "required": [
          "name",
          "interval",
          "retention_count"
        ]
      },
      "op": "create",
      "path": "/app_templates/:name/snapshot_policies",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "read": {
      "descr": "List all snapshot policies on an app template",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/app_templates/:name/snapshot_policies",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:name/snapshot_policies",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:name/snapshot_policies",
      "urlParamSchema": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    }
  },
  "/app_templates/:app_template_name/snapshot_policies/:snapshot_policy_name": {
    "read": {
      "descr": "Show a single snapshot policy on an app template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/app_templates/:app_template_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "update": {
      "descr": "Update a snapshot policy on an app template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      },
      "op": "update",
      "path": "/app_templates/:app_template_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "delete": {
      "descr": "Delete a snapshot policy on an app template",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "delete",
      "path": "/app_templates/:app_template_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/app_templates/:app_template_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/app_templates/:app_template_name/snapshot_policies/:snapshot_policy_name",
      "urlParamSchema": {
        "app_template_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for app template"
        },
        "snapshot_policy_name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
          "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
          "descr": "Name or label for snapshot policy"
        }
      },
      "entity": "snapshot_policy",
      "minVersion": "1.1.0.0",
      "group": "app_storage_design",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for snapshot policy"
          },
          "retention_count": {
            "type": "integer",
            "descr": "Total number of snapshots to retain on this schedule",
            "minimum": 1,
            "maximum": 256
          },
          "start_time": {
            "type": "string",
            "descr": "Must be an ISO8601 formatted timestamp",
            "format": "date-time"
          },
          "interval": {
            "enum": [
              "1min",
              "2min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ],
            "internal_enums": [
              "1min",
              "2min"
            ],
            "descr": "Interval of time between snapshots on this schedule",
            "fmthelp": "Must be one of: '15min', '1hour', '1day', '1week', '1month', '1year'"
          }
        }
      }
    }
  },
  "/storage_nodes/:uuid/subsystem_states": {
    "read": {
      "descr": "Show subsystem_states information for a storage node",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/storage_nodes/:uuid/subsystem_states",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "subsystem",
      "minVersion": "1.5.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "network": {
            "type": "string",
            "descr": "Network state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "voltage": {
            "type": "string",
            "descr": "Voltage state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "temperature": {
            "type": "string",
            "descr": "Temperature state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "power": {
            "type": "string",
            "descr": "Power state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "fan": {
            "type": "string",
            "descr": "Fan state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the subsystem (ok, warning, critical)"
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes/:uuid/subsystem_states",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "subsystem",
      "minVersion": "1.5.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "network": {
            "type": "string",
            "descr": "Network state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "voltage": {
            "type": "string",
            "descr": "Voltage state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "temperature": {
            "type": "string",
            "descr": "Temperature state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "power": {
            "type": "string",
            "descr": "Power state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "fan": {
            "type": "string",
            "descr": "Fan state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the subsystem (ok, warning, critical)"
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes/:uuid/subsystem_states",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "subsystem",
      "minVersion": "1.5.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "network": {
            "type": "string",
            "descr": "Network state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "voltage": {
            "type": "string",
            "descr": "Voltage state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "temperature": {
            "type": "string",
            "descr": "Temperature state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "power": {
            "type": "string",
            "descr": "Power state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "fan": {
            "type": "string",
            "descr": "Fan state",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the subsystem (ok, warning, critical)"
          }
        }
      }
    }
  },
  "/storage_nodes/:uuid/flash_devices": {
    "read": {
      "descr": "List all the flash devices on a storage node",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "op": "read",
      "path": "/storage_nodes/:uuid/flash_devices",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "nvm_flash_device",
      "minVersion": "1.5.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NVM flash device (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes/:uuid/flash_devices",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "nvm_flash_device",
      "minVersion": "1.5.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NVM flash device (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes/:uuid/flash_devices",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        }
      },
      "entity": "nvm_flash_device",
      "minVersion": "1.5.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NVM flash device (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    }
  },
  "/storage_nodes/:uuid/flash_devices/:id": {
    "read": {
      "descr": "Get the flash device on a storage node",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "read",
      "path": "/storage_nodes/:uuid/flash_devices/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "nvm_flash_device",
      "minVersion": "1.5.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NVM flash device (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "stream": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "stream",
      "path": "/storage_nodes/:uuid/flash_devices/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "nvm_flash_device",
      "minVersion": "1.5.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NVM flash device (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    },
    "live": {
      "descr": "",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "op": "live",
      "path": "/storage_nodes/:uuid/flash_devices/:id",
      "urlParamSchema": {
        "uuid": {
          "type": "string",
          "descr": "UUID of the storage node"
        },
        "id": {
          "type": "string",
          "descr": "Unique identifier for the device"
        }
      },
      "entity": "nvm_flash_device",
      "minVersion": "1.5.0.0",
      "group": "storage_node_ops",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "id": {
            "type": "string",
            "descr": "Unique identifier for the device"
          },
          "slot_label": {
            "type": "string",
            "descr": "Slot label of the component"
          },
          "health": {
            "enum": [
              "unknown",
              "ok",
              "warning",
              "critical"
            ],
            "descr": "Health of the NVM flash device (ok, warning, critical)"
          },
          "op_state": {
            "enum": [
              "unknown",
              "active",
              "degraded",
              "error",
              "predictive_failure",
              "nonrecoverable_failure",
              "missing",
              "HW_UNKNOWN",
              "HW_OK",
              "HW_DEGRADED",
              "HW_ERROR",
              "HW_PREDICTIVE_FAILURE",
              "HW_NONRECOVERABLE",
              "HW_MISSING"
            ],
            "descr": "The operational state of the component"
          },
          "size": {
            "type": "integer",
            "descr": "Amount of storage in bytes"
          },
          "causes": {
            "type": "array",
            "descr": "Causes of non-optimal health",
            "ignore_formatting": true
          }
        }
      }
    }
  },
  "/app_instances/:id/metadata": {},
  "/app_instances/:ai_id/storage_instances/:si_id/metadata": {},
  "/tenants": {
    "read": {
      "op": "read",
      "path": "/tenants",
      "group": "tenant_mgmt",
      "entity": "tenant",
      "descr": "List all tenants accessible by the current user",
      "minVersion": "1.5.0.0",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore; or, must be a valid UUID",
            "descr": "Name or label for tenant"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Description of tenant",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "subtenants": {
            "descr": "Subtenants of the tenant",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "tenant"
            }
          },
          "parent_path": {
            "type": "string",
            "descr": "Path to parent tenant",
            "fmthelp": "Must be a valid path to an existing tenant",
            "default": "/root"
          }
        }
      }
    },
    "create": {
      "op": "create",
      "path": "/tenants",
      "descr": "Create a tenant",
      "group": "tenant_mgmt",
      "minVersion": "1.5.0.0",
      "entity": "tenant",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore; or, must be a valid UUID",
            "descr": "Name or label for tenant"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Description of tenant",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "parent_path": {
            "type": "string",
            "descr": "Path to parent tenant",
            "fmthelp": "Must be a valid path to an existing tenant",
            "default": "/root"
          }
        },
        "required": [
          "name"
        ]
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore; or, must be a valid UUID",
            "descr": "Name or label for tenant"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Description of tenant",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "subtenants": {
            "descr": "Subtenants of the tenant",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "tenant"
            }
          },
          "parent_path": {
            "type": "string",
            "descr": "Path to parent tenant",
            "fmthelp": "Must be a valid path to an existing tenant",
            "default": "/root"
          }
        }
      }
    }
  },
  "/tenants/:tenant_path(((?:[A-Za-z0-9_-])+(?:/[.A-Za-z0-9_-]+){0,}$))": {
    "read": {
      "op": "read",
      "path": "/tenants/:tenant_path(((?:[A-Za-z0-9_-])+(?:/[.A-Za-z0-9_-]+){0,}$))",
      "descr": "Show a single tenant",
      "group": "tenant_mgmt",
      "minVersion": "1.5.0.0",
      "entity": "tenant",
      "urlParamSchema": {
        "tenant_path": {
          "type": "string",
          "descr": "Short or long-form path to the tenant"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore; or, must be a valid UUID",
            "descr": "Name or label for tenant"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Description of tenant",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "subtenants": {
            "descr": "Subtenants of the tenant",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "tenant"
            }
          },
          "parent_path": {
            "type": "string",
            "descr": "Path to parent tenant",
            "fmthelp": "Must be a valid path to an existing tenant",
            "default": "/root"
          }
        }
      }
    },
    "update": {
      "op": "update",
      "path": "/tenants/:tenant_path(((?:[A-Za-z0-9_-])+(?:/[.A-Za-z0-9_-]+){0,}$))",
      "descr": "Update a tenant",
      "urlParamSchema": {
        "tenant_path": {
          "type": "string",
          "descr": "Short or long-form path to the tenant"
        }
      },
      "group": "tenant_mgmt",
      "minVersion": "1.5.0.0",
      "entity": "tenant",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Description of tenant",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        }
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore; or, must be a valid UUID",
            "descr": "Name or label for tenant"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Description of tenant",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "subtenants": {
            "descr": "Subtenants of the tenant",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "tenant"
            }
          },
          "parent_path": {
            "type": "string",
            "descr": "Path to parent tenant",
            "fmthelp": "Must be a valid path to an existing tenant",
            "default": "/root"
          }
        }
      }
    },
    "delete": {
      "op": "delete",
      "path": "/tenants/:tenant_path(((?:[A-Za-z0-9_-])+(?:/[.A-Za-z0-9_-]+){0,}$))",
      "descr": "Delete a tenant",
      "urlParamSchema": {
        "tenant_path": {
          "type": "string",
          "descr": "Short or long-form path to the tenant"
        }
      },
      "group": "tenant_mgmt",
      "minVersion": "1.5.0.0",
      "entity": "tenant",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "(^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$)|(^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$)",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore; or, must be a valid UUID",
            "descr": "Name or label for tenant"
          },
          "descr": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\s\\.]{2,127}$",
            "descr": "Description of tenant",
            "fmthelp": "Must be a combination of letters, numbers, spaces, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          },
          "subtenants": {
            "descr": "Subtenants of the tenant",
            "containment": {
              "key": "name",
              "isCollection": true,
              "entity": "tenant"
            }
          },
          "parent_path": {
            "type": "string",
            "descr": "Path to parent tenant",
            "fmthelp": "Must be a valid path to an existing tenant",
            "default": "/root"
          }
        }
      }
    }
  },
  "/system/snmp_policy": {
    "read": {
      "op": "read",
      "path": "/system/snmp_policy",
      "group": "monitoring",
      "descr": "Show the SNMP policy configuration",
      "minVersion": "1.5.0.0",
      "entity": "snmp_policy",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "location": {
            "type": "string",
            "descr": "SNMP agent location information",
            "pattern": "^[a-zA-Z_][^\\\\]{2,127}$",
            "fmthelp": "Must be a valid string between 3 and 128 characters, starting with a letter or underscore. Backslashes not allowed."
          },
          "contact": {
            "type": "string",
            "descr": "SNMP agent contact information",
            "pattern": "^[a-zA-Z_][^\\\\]{2,127}$",
            "fmthelp": "Must be a valid string between 3 and 128 characters, starting with a letter or underscore. Backslashes not allowed."
          },
          "enabled": {
            "type": "boolean",
            "descr": "Flag to enable or disable SNMP"
          },
          "users": {
            "descr": "List of configured SNMP users",
            "containment": {
              "isCollection": true,
              "entity": "snmp_user",
              "key": "user_id"
            }
          }
        }
      }
    },
    "update": {
      "op": "update",
      "path": "/system/snmp_policy",
      "group": "monitoring",
      "descr": "Update the SNMP policy configuration",
      "minVersion": "1.5.0.0",
      "entity": "snmp_policy",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "location": {
            "type": "string",
            "descr": "SNMP agent location information",
            "pattern": "^[a-zA-Z_][^\\\\]{2,127}$",
            "fmthelp": "Must be a valid string between 3 and 128 characters, starting with a letter or underscore. Backslashes not allowed."
          },
          "contact": {
            "type": "string",
            "descr": "SNMP agent contact information",
            "pattern": "^[a-zA-Z_][^\\\\]{2,127}$",
            "fmthelp": "Must be a valid string between 3 and 128 characters, starting with a letter or underscore. Backslashes not allowed."
          },
          "enabled": {
            "type": "boolean",
            "descr": "Flag to enable or disable SNMP"
          }
        }
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "location": {
            "type": "string",
            "descr": "SNMP agent location information",
            "pattern": "^[a-zA-Z_][^\\\\]{2,127}$",
            "fmthelp": "Must be a valid string between 3 and 128 characters, starting with a letter or underscore. Backslashes not allowed."
          },
          "contact": {
            "type": "string",
            "descr": "SNMP agent contact information",
            "pattern": "^[a-zA-Z_][^\\\\]{2,127}$",
            "fmthelp": "Must be a valid string between 3 and 128 characters, starting with a letter or underscore. Backslashes not allowed."
          },
          "enabled": {
            "type": "boolean",
            "descr": "Flag to enable or disable SNMP"
          },
          "users": {
            "descr": "List of configured SNMP users",
            "containment": {
              "isCollection": true,
              "entity": "snmp_user",
              "key": "user_id"
            }
          }
        }
      }
    }
  },
  "/system/snmp_policy/users": {
    "create": {
      "op": "create",
      "path": "/system/snmp_policy/users",
      "group": "monitoring",
      "descr": "Create an SNMP user",
      "minVersion": "1.5.0.0",
      "entity": "snmp_user",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "user_id": {
            "type": "string",
            "descr": "Community string (v1/v2c) or user ID (v3)"
          },
          "version": {
            "enum": [
              "v1",
              "v2c",
              "v3"
            ],
            "descr": "SNMP version"
          },
          "view": {
            "enum": [
              "all",
              "host_resources"
            ],
            "descr": "Pre-configured MIB view for this user. 'All' is OID .1.3.6.1.2.1 and 'Host' is OID .1.3.6.1.2.1.25"
          },
          "auth_pass": {
            "type": "string",
            "descr": "Authentication password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "encr_pass": {
            "type": "string",
            "descr": "Encryption (privacy) password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "auth_protocol": {
            "enum": [
              "MD5",
              "SHA"
            ],
            "descr": "Authentication protocol (v3 only)"
          },
          "encr_protocol": {
            "enum": [
              "AES",
              "DES"
            ],
            "descr": "Encryption (privacy) protocol (v3 only)"
          },
          "security_level": {
            "enum": [
              "none",
              "auth_only",
              "auth_encr"
            ],
            "descr": "Security level (v3 only)"
          }
        },
        "required": [
          "user_id",
          "version"
        ]
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "descr": "Community string (v1/v2c) or user ID (v3)"
          },
          "version": {
            "enum": [
              "v1",
              "v2c",
              "v3"
            ],
            "descr": "SNMP version"
          },
          "view": {
            "enum": [
              "all",
              "host_resources"
            ],
            "descr": "Pre-configured MIB view for this user. 'All' is OID .1.3.6.1.2.1 and 'Host' is OID .1.3.6.1.2.1.25"
          },
          "auth_pass": {
            "type": "string",
            "descr": "Authentication password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "encr_pass": {
            "type": "string",
            "descr": "Encryption (privacy) password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "auth_protocol": {
            "enum": [
              "MD5",
              "SHA"
            ],
            "descr": "Authentication protocol (v3 only)"
          },
          "encr_protocol": {
            "enum": [
              "AES",
              "DES"
            ],
            "descr": "Encryption (privacy) protocol (v3 only)"
          },
          "security_level": {
            "enum": [
              "none",
              "auth_only",
              "auth_encr"
            ],
            "descr": "Security level (v3 only)"
          }
        }
      }
    },
    "read": {
      "op": "read",
      "path": "/system/snmp_policy/users",
      "group": "monitoring",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "String in Resource Query Language syntax to filter down the collection",
            "fmthelp": "No spaces allowed",
            "example": "name=foo"
          },
          "limit": {
            "type": "integer",
            "example": 2,
            "descr": "Number of items to return",
            "minimum": 0,
            "maximum": 1000
          },
          "sort": {
            "type": "string",
            "pattern": "^\\S*$",
            "descr": "Name of attribute to sort by. Default sort is ascending.",
            "fmthelp": "No spaces allowed",
            "example": "name"
          }
        }
      },
      "descr": "List all SNMP users",
      "minVersion": "1.5.0.0",
      "entity": "snmp_user",
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "descr": "Community string (v1/v2c) or user ID (v3)"
          },
          "version": {
            "enum": [
              "v1",
              "v2c",
              "v3"
            ],
            "descr": "SNMP version"
          },
          "view": {
            "enum": [
              "all",
              "host_resources"
            ],
            "descr": "Pre-configured MIB view for this user. 'All' is OID .1.3.6.1.2.1 and 'Host' is OID .1.3.6.1.2.1.25"
          },
          "auth_pass": {
            "type": "string",
            "descr": "Authentication password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "encr_pass": {
            "type": "string",
            "descr": "Encryption (privacy) password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "auth_protocol": {
            "enum": [
              "MD5",
              "SHA"
            ],
            "descr": "Authentication protocol (v3 only)"
          },
          "encr_protocol": {
            "enum": [
              "AES",
              "DES"
            ],
            "descr": "Encryption (privacy) protocol (v3 only)"
          },
          "security_level": {
            "enum": [
              "none",
              "auth_only",
              "auth_encr"
            ],
            "descr": "Security level (v3 only)"
          }
        }
      }
    }
  },
  "/system/snmp_policy/users/:user_id": {
    "read": {
      "op": "read",
      "path": "/system/snmp_policy/users/:user_id",
      "group": "monitoring",
      "descr": "Show an SNMP user",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "descr": "Community string (v1/v2c) or user ID (v3)"
        }
      },
      "minVersion": "1.5.0.0",
      "entity": "snmp_user",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "descr": "Community string (v1/v2c) or user ID (v3)"
          },
          "version": {
            "enum": [
              "v1",
              "v2c",
              "v3"
            ],
            "descr": "SNMP version"
          },
          "view": {
            "enum": [
              "all",
              "host_resources"
            ],
            "descr": "Pre-configured MIB view for this user. 'All' is OID .1.3.6.1.2.1 and 'Host' is OID .1.3.6.1.2.1.25"
          },
          "auth_pass": {
            "type": "string",
            "descr": "Authentication password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "encr_pass": {
            "type": "string",
            "descr": "Encryption (privacy) password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "auth_protocol": {
            "enum": [
              "MD5",
              "SHA"
            ],
            "descr": "Authentication protocol (v3 only)"
          },
          "encr_protocol": {
            "enum": [
              "AES",
              "DES"
            ],
            "descr": "Encryption (privacy) protocol (v3 only)"
          },
          "security_level": {
            "enum": [
              "none",
              "auth_only",
              "auth_encr"
            ],
            "descr": "Security level (v3 only)"
          }
        }
      }
    },
    "update": {
      "op": "update",
      "path": "/system/snmp_policy/users/:user_id",
      "group": "monitoring",
      "descr": "Modify an SNMP user",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "descr": "Community string (v1/v2c) or user ID (v3)"
        }
      },
      "minVersion": "1.5.0.0",
      "entity": "snmp_user",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "view": {
            "enum": [
              "all",
              "host_resources"
            ],
            "descr": "Pre-configured MIB view for this user. 'All' is OID .1.3.6.1.2.1 and 'Host' is OID .1.3.6.1.2.1.25"
          },
          "auth_pass": {
            "type": "string",
            "descr": "Authentication password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "encr_pass": {
            "type": "string",
            "descr": "Encryption (privacy) password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "auth_protocol": {
            "enum": [
              "MD5",
              "SHA"
            ],
            "descr": "Authentication protocol (v3 only)"
          },
          "encr_protocol": {
            "enum": [
              "AES",
              "DES"
            ],
            "descr": "Encryption (privacy) protocol (v3 only)"
          },
          "security_level": {
            "enum": [
              "none",
              "auth_only",
              "auth_encr"
            ],
            "descr": "Security level (v3 only)"
          }
        }
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "descr": "Community string (v1/v2c) or user ID (v3)"
          },
          "version": {
            "enum": [
              "v1",
              "v2c",
              "v3"
            ],
            "descr": "SNMP version"
          },
          "view": {
            "enum": [
              "all",
              "host_resources"
            ],
            "descr": "Pre-configured MIB view for this user. 'All' is OID .1.3.6.1.2.1 and 'Host' is OID .1.3.6.1.2.1.25"
          },
          "auth_pass": {
            "type": "string",
            "descr": "Authentication password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "encr_pass": {
            "type": "string",
            "descr": "Encryption (privacy) password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "auth_protocol": {
            "enum": [
              "MD5",
              "SHA"
            ],
            "descr": "Authentication protocol (v3 only)"
          },
          "encr_protocol": {
            "enum": [
              "AES",
              "DES"
            ],
            "descr": "Encryption (privacy) protocol (v3 only)"
          },
          "security_level": {
            "enum": [
              "none",
              "auth_only",
              "auth_encr"
            ],
            "descr": "Security level (v3 only)"
          }
        }
      }
    },
    "delete": {
      "op": "delete",
      "path": "/system/snmp_policy/users/:user_id",
      "group": "monitoring",
      "descr": "Delete an SNMP user",
      "urlParamSchema": {
        "user_id": {
          "type": "string",
          "descr": "Community string (v1/v2c) or user ID (v3)"
        }
      },
      "minVersion": "1.5.0.0",
      "entity": "snmp_user",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "user_id": {
            "type": "string",
            "descr": "Community string (v1/v2c) or user ID (v3)"
          },
          "version": {
            "enum": [
              "v1",
              "v2c",
              "v3"
            ],
            "descr": "SNMP version"
          },
          "view": {
            "enum": [
              "all",
              "host_resources"
            ],
            "descr": "Pre-configured MIB view for this user. 'All' is OID .1.3.6.1.2.1 and 'Host' is OID .1.3.6.1.2.1.25"
          },
          "auth_pass": {
            "type": "string",
            "descr": "Authentication password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "encr_pass": {
            "type": "string",
            "descr": "Encryption (privacy) password (v3 only)",
            "minLength": 8,
            "fmthelp": "Must be a valid string at least 8 characters in length."
          },
          "auth_protocol": {
            "enum": [
              "MD5",
              "SHA"
            ],
            "descr": "Authentication protocol (v3 only)"
          },
          "encr_protocol": {
            "enum": [
              "AES",
              "DES"
            ],
            "descr": "Encryption (privacy) protocol (v3 only)"
          },
          "security_level": {
            "enum": [
              "none",
              "auth_only",
              "auth_encr"
            ],
            "descr": "Security level (v3 only)"
          }
        }
      }
    }
  },
  "/events/debug": {},
  "/events/system": {},
  "/events/user": {},
  "/events/:uuid": {},
  "/init/config": {
    "read": {
      "group": "system_mgmt",
      "descr": "Get the current system init settings",
      "minVersion": "1.1.0.0",
      "op": "read",
      "path": "/init/config"
    }
  },
  "/upgrade": {
    "update": {
      "group": "system_mgmt",
      "descr": "Update the Datera system software version",
      "minVersion": "1.0.0.0",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "build_id": {
            "type": "string",
            "descr": "Build ID of the version to install"
          }
        },
        "required": [
          "build_id"
        ],
        "additionalProperties": false
      },
      "op": "update",
      "path": "/upgrade"
    }
  },
  "/upgrade/available": {
    "read": {
      "group": "system_mgmt",
      "descr": "List the software versions availabe for upgrade",
      "minVersion": "1.0.0.0",
      "bodyParamSchema": {},
      "op": "read",
      "path": "/upgrade/available"
    }
  },
  "/time": {
    "read": {
      "op": "read",
      "path": "/time",
      "group": "other",
      "descr": "Get the current system time",
      "minVersion": "1.0.0.0"
    },
    "live": {
      "op": "live",
      "path": "/time",
      "group": "other",
      "descr": "Open a live stream of the current system time",
      "minVersion": "1.0.0.0"
    }
  },
  "/metadata": {},
  "/login": {
    "update": {
      "op": "update",
      "path": "/login",
      "group": "session",
      "descr": "Log in",
      "minVersion": "1.5.0.0",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,32}$",
            "descr": "Must be a combination of letters, numbers, and underscores between 3 and 32 characters"
          },
          "password": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,127}$",
            "descr": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 128 characters; must start with either a letter or underscore"
          }
        },
        "required": [
          "name",
          "password"
        ]
      }
    }
  },
  "/logout": {
    "update": {
      "op": "update",
      "path": "/logout",
      "group": "session",
      "descr": "Log out",
      "minVersion": "1.5.0.0"
    }
  },
  "/userinfo": {
    "live": {
      "op": "live",
      "path": "/userinfo",
      "group": "session",
      "descr": "Get a live stream of session information",
      "minVersion": "1.5.0.0"
    },
    "read": {
      "op": "read",
      "path": "/userinfo",
      "group": "session",
      "descr": "Get information about the current user session",
      "minVersion": "1.5.0.0"
    }
  },
  "/monitoring/alerts": {},
  "/monitoring/destinations/default": {
    "update": {
      "op": "update",
      "path": "/monitoring/destinations/default",
      "group": "monitoring",
      "descr": "Update the default monitoring destination",
      "minVersion": "1.5.0.0",
      "entity": "monitoring_destination",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "host": {
            "type": "string",
            "descr": "IP address of or hostname of remote destination",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)"
          },
          "port": {
            "type": "integer",
            "descr": "Port of remote destination"
          },
          "facility": {
            "descr": "For syslog destinations, the facility with which to tag Datera messages",
            "enum": [
              "Local0",
              "Local1",
              "Local2",
              "Local3",
              "Local4",
              "Local5",
              "Local6",
              "Local7"
            ]
          }
        }
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for monitoring destination"
          },
          "type": {
            "descr": "Type of remote destination to send monitoring data to",
            "enum": [
              "syslog",
              "http_post",
              "tcp_socket"
            ]
          },
          "host": {
            "type": "string",
            "descr": "IP address of or hostname of remote destination",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)"
          },
          "port": {
            "type": "integer",
            "descr": "Port of remote destination"
          },
          "last_msg_ts": {
            "descr": "Timestamp of last attempt to send data to destination",
            "type": "date-time"
          },
          "op_state": {
            "descr": "State of the network connection to the remote destination",
            "enum": [
              "init",
              "success",
              "failure"
            ]
          },
          "facility": {
            "descr": "For syslog destinations, the facility with which to tag Datera messages",
            "enum": [
              "Local0",
              "Local1",
              "Local2",
              "Local3",
              "Local4",
              "Local5",
              "Local6",
              "Local7"
            ]
          }
        }
      }
    },
    "read": {
      "op": "read",
      "path": "/monitoring/destinations/default",
      "group": "monitoring",
      "descr": "Show the default monitoring destination",
      "minVersion": "1.5.0.0",
      "entity": "monitoring_destination",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for monitoring destination"
          },
          "type": {
            "descr": "Type of remote destination to send monitoring data to",
            "enum": [
              "syslog",
              "http_post",
              "tcp_socket"
            ]
          },
          "host": {
            "type": "string",
            "descr": "IP address of or hostname of remote destination",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$)|(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)"
          },
          "port": {
            "type": "integer",
            "descr": "Port of remote destination"
          },
          "last_msg_ts": {
            "descr": "Timestamp of last attempt to send data to destination",
            "type": "date-time"
          },
          "op_state": {
            "descr": "State of the network connection to the remote destination",
            "enum": [
              "init",
              "success",
              "failure"
            ]
          },
          "facility": {
            "descr": "For syslog destinations, the facility with which to tag Datera messages",
            "enum": [
              "Local0",
              "Local1",
              "Local2",
              "Local3",
              "Local4",
              "Local5",
              "Local6",
              "Local7"
            ]
          }
        }
      }
    }
  },
  "/monitoring/policies/default": {
    "update": {
      "op": "update",
      "path": "/monitoring/policies/default",
      "group": "monitoring",
      "descr": "Update the default monitoring policy",
      "minVersion": "1.5.0.0",
      "entity": "monitoring_policy",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable/disable the policy"
          }
        }
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for monitoring policy"
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable/disable the policy"
          },
          "destinations": {
            "descr": "Monitoring destinations for this policy",
            "fmthelp": "Must be an array of paths pointing to monitoring destinations",
            "simple_reference": {
              "isCollection": true,
              "entity": "monitoring_destination"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    },
    "read": {
      "op": "read",
      "path": "/monitoring/policies/default",
      "group": "monitoring",
      "descr": "Show the default monitoring policy",
      "minVersion": "1.5.0.0",
      "entity": "monitoring_policy",
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "returnParamSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path of the entity",
            "pattern": {}
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_\\-\\.]{2,63}$",
            "fmthelp": "Must be a combination of letters, numbers, underscores, and dashes between 3 and 64 characters; must start with either a letter or underscore",
            "descr": "Name or label for monitoring policy"
          },
          "enabled": {
            "type": "boolean",
            "descr": "Boolean flag to enable/disable the policy"
          },
          "destinations": {
            "descr": "Monitoring destinations for this policy",
            "fmthelp": "Must be an array of paths pointing to monitoring destinations",
            "simple_reference": {
              "isCollection": true,
              "entity": "monitoring_destination"
            },
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "pattern": "(^(\\/)$)|(^(\\/[^\\/]+)+$)"
                }
              },
              "additionalProperties": false,
              "required": [
                "path"
              ]
            }
          }
        }
      }
    }
  },
  "/metrics/io/:metric": {
    "read": {
      "op": "read",
      "path": "/metrics/io/:metric",
      "group": "monitoring",
      "descr": "Show a particular io metric for a given time range and entity(ies)",
      "minVersion": "2.0.0.0",
      "urlParamSchema": {
        "metric": {
          "enum": [
            "reads",
            "writes",
            "bytes_read",
            "bytes_written",
            "iops_read",
            "iops_write",
            "thpt_read",
            "thpt_write",
            "lat_avg_read",
            "lat_avg_write",
            "lat_50_read",
            "lat_90_read",
            "lat_100_read",
            "lat_50_write",
            "lat_90_write",
            "lat_100_write"
          ],
          "descr": "Type of metric"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "since": {
            "type": "string",
            "pattern": "^(\\d+(d|h|m|s))+$",
            "descr": "Length of time since now to fetch metrics, using seconds, minutes, hours, or days. Examples: \"5s\", \"3m22s\", \"1d2h\""
          },
          "from": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Starting timestamp of time range in UNIX or ISO8601 format"
          },
          "to": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Ending timestamp of time range in UNIX or ISO8601 format"
          },
          "path": {
            "type": "string",
            "descr": "Path for the entity(ies) you would like to get metrics for. Valid paths are ['/system', '/app_instances', '/app_instances/:uuid', '/app_instances/:uuid/storage_instances/:name', '/app_instances/:uuid/storage_instances/:name/volumes/:name', '/storage_instances', '/volumes']"
          },
          "uuid": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "UUID for the entity you would like to get metrics for"
          }
        }
      }
    },
    "stream": {
      "op": "stream",
      "path": "/metrics/io/:metric",
      "group": "monitoring",
      "descr": "Show a particular io metric for a given time range and entity(ies)",
      "minVersion": "2.0.0.0",
      "urlParamSchema": {
        "metric": {
          "enum": [
            "reads",
            "writes",
            "bytes_read",
            "bytes_written",
            "iops_read",
            "iops_write",
            "thpt_read",
            "thpt_write",
            "lat_avg_read",
            "lat_avg_write",
            "lat_50_read",
            "lat_90_read",
            "lat_100_read",
            "lat_50_write",
            "lat_90_write",
            "lat_100_write"
          ],
          "descr": "Type of metric"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "since": {
            "type": "string",
            "pattern": "^(\\d+(d|h|m|s))+$",
            "descr": "Length of time since now to fetch metrics, using seconds, minutes, hours, or days. Examples: \"5s\", \"3m22s\", \"1d2h\""
          },
          "from": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Starting timestamp of time range in UNIX or ISO8601 format"
          },
          "to": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Ending timestamp of time range in UNIX or ISO8601 format"
          },
          "path": {
            "type": "string",
            "descr": "Path for the entity(ies) you would like to get metrics for. Valid paths are ['/system', '/app_instances', '/app_instances/:uuid', '/app_instances/:uuid/storage_instances/:name', '/app_instances/:uuid/storage_instances/:name/volumes/:name', '/storage_instances', '/volumes']"
          },
          "uuid": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "UUID for the entity you would like to get metrics for"
          }
        }
      }
    },
    "live": {
      "op": "live",
      "path": "/metrics/io/:metric",
      "group": "monitoring",
      "descr": "Show a particular io metric for a given time range and entity(ies)",
      "minVersion": "2.0.0.0",
      "urlParamSchema": {
        "metric": {
          "enum": [
            "reads",
            "writes",
            "bytes_read",
            "bytes_written",
            "iops_read",
            "iops_write",
            "thpt_read",
            "thpt_write",
            "lat_avg_read",
            "lat_avg_write",
            "lat_50_read",
            "lat_90_read",
            "lat_100_read",
            "lat_50_write",
            "lat_90_write",
            "lat_100_write"
          ],
          "descr": "Type of metric"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "since": {
            "type": "string",
            "pattern": "^(\\d+(d|h|m|s))+$",
            "descr": "Length of time since now to fetch metrics, using seconds, minutes, hours, or days. Examples: \"5s\", \"3m22s\", \"1d2h\""
          },
          "from": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Starting timestamp of time range in UNIX or ISO8601 format"
          },
          "to": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Ending timestamp of time range in UNIX or ISO8601 format"
          },
          "path": {
            "type": "string",
            "descr": "Path for the entity(ies) you would like to get metrics for. Valid paths are ['/system', '/app_instances', '/app_instances/:uuid', '/app_instances/:uuid/storage_instances/:name', '/app_instances/:uuid/storage_instances/:name/volumes/:name', '/storage_instances', '/volumes']"
          },
          "uuid": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "UUID for the entity you would like to get metrics for"
          }
        }
      }
    }
  },
  "/metrics/io/:metric/latest": {
    "read": {
      "op": "read",
      "path": "/metrics/io/:metric/latest",
      "group": "monitoring",
      "descr": "Show a particular io latest metric for a entity(ies)",
      "minVersion": "2.0.0.0",
      "urlParamSchema": {
        "metric": {
          "enum": [
            "reads",
            "writes",
            "bytes_read",
            "bytes_written",
            "iops_read",
            "iops_write",
            "thpt_read",
            "thpt_write",
            "lat_avg_read",
            "lat_avg_write",
            "lat_50_read",
            "lat_90_read",
            "lat_100_read",
            "lat_50_write",
            "lat_90_write",
            "lat_100_write"
          ],
          "descr": "Type of metric"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path for the entity(ies) you would like to get metrics for. Valid paths are ['/system', '/app_instances', '/app_instances/:uuid', '/app_instances/:uuid/storage_instances/:name', '/app_instances/:uuid/storage_instances/:name/volumes/:name', '/storage_instances', '/volumes']"
          },
          "uuid": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "UUID for the entity you would like to get metrics for"
          }
        }
      }
    }
  },
  "/metrics/hw/:metric": {
    "read": {
      "op": "read",
      "path": "/metrics/hw/:metric",
      "group": "monitoring",
      "descr": "Show a particular hw metric for a given time range and entity(ies)",
      "minVersion": "2.0.0.0",
      "urlParamSchema": {
        "metric": {
          "enum": [
            "cpu_usage"
          ],
          "descr": "Type of metric"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "since": {
            "type": "string",
            "pattern": "^(\\d+(d|h|m|s))+$",
            "descr": "Length of time since now to fetch metrics, using seconds, minutes, hours, or days. Examples: \"5s\", \"3m22s\", \"1d2h\""
          },
          "from": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Starting timestamp of time range in UNIX or ISO8601 format"
          },
          "to": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Ending timestamp of time range in UNIX or ISO8601 format"
          },
          "path": {
            "type": "string",
            "descr": "Path for the entity you would like to get metrics for. Valid paths are ['/storage_nodes/:uuid', '/storage_nodes']"
          },
          "uuid": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "UUID for the entity you would like to get metrics for"
          }
        }
      }
    },
    "stream": {
      "op": "stream",
      "path": "/metrics/hw/:metric",
      "group": "monitoring",
      "descr": "Show a particular hw metric for a given time range and entity(ies)",
      "minVersion": "2.0.0.0",
      "urlParamSchema": {
        "metric": {
          "enum": [
            "cpu_usage"
          ],
          "descr": "Type of metric"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "since": {
            "type": "string",
            "pattern": "^(\\d+(d|h|m|s))+$",
            "descr": "Length of time since now to fetch metrics, using seconds, minutes, hours, or days. Examples: \"5s\", \"3m22s\", \"1d2h\""
          },
          "from": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Starting timestamp of time range in UNIX or ISO8601 format"
          },
          "to": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Ending timestamp of time range in UNIX or ISO8601 format"
          },
          "path": {
            "type": "string",
            "descr": "Path for the entity you would like to get metrics for. Valid paths are ['/storage_nodes/:uuid', '/storage_nodes']"
          },
          "uuid": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "UUID for the entity you would like to get metrics for"
          }
        }
      }
    },
    "live": {
      "op": "live",
      "path": "/metrics/hw/:metric",
      "group": "monitoring",
      "descr": "Show a particular hw metric for a given time range and entity(ies)",
      "minVersion": "2.0.0.0",
      "urlParamSchema": {
        "metric": {
          "enum": [
            "cpu_usage"
          ],
          "descr": "Type of metric"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "since": {
            "type": "string",
            "pattern": "^(\\d+(d|h|m|s))+$",
            "descr": "Length of time since now to fetch metrics, using seconds, minutes, hours, or days. Examples: \"5s\", \"3m22s\", \"1d2h\""
          },
          "from": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Starting timestamp of time range in UNIX or ISO8601 format"
          },
          "to": {
            "type": [
              "string",
              "integer"
            ],
            "descr": "Ending timestamp of time range in UNIX or ISO8601 format"
          },
          "path": {
            "type": "string",
            "descr": "Path for the entity you would like to get metrics for. Valid paths are ['/storage_nodes/:uuid', '/storage_nodes']"
          },
          "uuid": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "UUID for the entity you would like to get metrics for"
          }
        }
      }
    }
  },
  "/metrics/hw/:metric/latest": {
    "read": {
      "op": "read",
      "path": "/metrics/hw/:metric/latest",
      "group": "monitoring",
      "descr": "Show a particular latest hw metric for a entity(ies)",
      "minVersion": "2.0.0.0",
      "urlParamSchema": {
        "metric": {
          "enum": [
            "cpu_usage"
          ],
          "descr": "Type of metric"
        }
      },
      "bodyParamSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "path": {
            "type": "string",
            "descr": "Path for the entity you would like to get metrics for. Valid paths are ['/storage_nodes/:uuid', '/storage_nodes']"
          },
          "uuid": {
            "type": "string",
            "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
            "descr": "UUID for the entity you would like to get metrics for"
          }
        }
      }
    }
  },
  "/api": {
    "read": {
      "op": "read",
      "path": "/api",
      "minVersion": "1.5.0.0",
      "bodyParamSchema": {
        "type": "object",
        "properties": {
          "group_by": {
            "enum": [
              "group",
              "route"
            ],
            "descr": "Configure how API endpoints are grouped together in response"
          },
          "group_filter": {
            "type": "string",
            "descr": "Filter results to only show a single endpoint group"
          }
        },
        "additionalProperties": false
      },
      "descr": "Fetch the API specification"
    }
  },
  "/health_attrs": {},
  "/policyadm": {},
  "version": "v2.1",
  "request_time": 86
}